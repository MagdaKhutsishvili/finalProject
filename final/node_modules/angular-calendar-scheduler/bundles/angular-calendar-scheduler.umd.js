(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('date-fns'), require('moment'), require('angular-calendar'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-calendar-scheduler', ['exports', '@angular/core', 'date-fns', 'moment', 'angular-calendar', '@angular/common'], factory) :
    (factory((global['angular-calendar-scheduler'] = {}),global.ng.core,null,null,null,global.ng.common));
}(this, (function (exports,core,dateFns,momentImported,angularCalendar,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Auth configuration.
     */
    var SchedulerConfig = (function () {
        function SchedulerConfig(config) {
            if (config === void 0) {
                config = {};
            }
            this.locale = 'en';
            this.headerDateFormat = 'daysRange';
            /**
             * @template T
             * @param {?} source
             * @param {?} defaultValue
             * @return {?}
             */
            function use(source, defaultValue) {
                return config && source !== undefined ? source : defaultValue;
            }
            this.locale = use(config.locale, this.locale);
            this.headerDateFormat = use(config.headerDateFormat, this.headerDateFormat);
        }
        SchedulerConfig.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        SchedulerConfig.ctorParameters = function () {
            return [
                { type: SchedulerConfig }
            ];
        };
        return SchedulerConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var WEEKEND_DAY_NUMBERS = [0, 6];
    /** @type {?} */
    var DAYS_IN_WEEK = 7;
    /** @type {?} */
    var MINUTES_IN_HOUR = 60;
    var CalendarSchedulerViewComponent = (function () {
        /**
         * @hidden
         */
        function CalendarSchedulerViewComponent(cdr, locale, config) {
            this.cdr = cdr;
            this.config = config;
            /**
             * An array of events to display on view
             */
            this.events = [];
            /**
             * The number of segments in an hour. Must be <= 6
             */
            this.hourSegments = 2;
            /**
             * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
             */
            this.excludeDays = [];
            /**
             * Specify if the first day of current scheduler view has to be today or the first day of the week
             */
            this.startsWithToday = false;
            /**
             * Specify if actions must be shown or not
             */
            this.showActions = true;
            /**
             * The placement of the event tooltip
             */
            this.tooltipPlacement = 'bottom';
            /**
             * The precision to display events.
             * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
             */
            this.precision = 'days';
            /**
             * The day start hours in 24 hour time. Must be 0-23
             */
            this.dayStartHour = 0;
            /**
             * The day start minutes. Must be 0-59
             */
            this.dayStartMinute = 0;
            /**
             * The day end hours in 24 hour time. Must be 0-23
             */
            this.dayEndHour = 23;
            /**
             * The day end minutes. Must be 0-59
             */
            this.dayEndMinute = 59;
            /**
             * Called when a header week day is clicked
             */
            this.dayClicked = new core.EventEmitter();
            /**
             * Called when the segment is clicked
             */
            this.segmentClicked = new core.EventEmitter();
            /**
             * Called when the event is clicked
             */
            this.eventClicked = new core.EventEmitter();
            /**
             * @hidden
             */
            this.hours = [];
            this.locale = config.locale || locale;
        }
        /**
         * @hidden
         */
        /**
         * @hidden
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.ngOnInit = /**
         * @hidden
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.refresh) {
                    this.refreshSubscription = this.refresh.subscribe(function () {
                        _this.refreshAll();
                        _this.cdr.markForCheck();
                    });
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @param {?} changes
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.ngOnChanges = /**
         * @hidden
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.hours = this.getSchedulerViewHourGrid({
                    viewDate: this.viewDate,
                    hourSegments: this.hourSegments,
                    dayStart: {
                        hour: this.dayStartHour,
                        minute: this.dayStartMinute
                    },
                    dayEnd: {
                        hour: this.dayEndHour,
                        minute: this.dayEndMinute
                    }
                });
                if (changes.viewDate || changes.excludeDays) {
                    this.refreshHeader();
                }
                if (changes.events || changes.viewDate || changes.excludeDays || changes.dayStartHour || changes.dayEndHour || changes.dayStartMinute || changes.dayEndMinute) {
                    this.refreshBody();
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.ngOnDestroy = /**
         * @hidden
         * @return {?}
         */
            function () {
                if (this.refreshSubscription) {
                    this.refreshSubscription.unsubscribe();
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @param {?} event
         * @param {?} isHighlighted
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.toggleSegmentHighlight = /**
         * @hidden
         * @param {?} event
         * @param {?} isHighlighted
         * @return {?}
         */
            function (event, isHighlighted) {
                this.days.forEach(function (day) {
                    day.hours.forEach(function (hour) {
                        // hour.segments.forEach((segment: SchedulerViewHourSegment) => {
                        //    if (isHighlighted && segment.events.indexOf(event) > -1) {
                        //        segment.backgroundColor = event.color.secondary;
                        //    } else {
                        //        delete segment.backgroundColor;
                        //    }
                        // });
                        hour.segments.filter(function (segment) { return segment.events.some(function (ev) { return ev.id === event.id && ev.start.getDay() === event.start.getDay(); }); })
                            .forEach(function (segment) {
                            segment.events.filter(function (ev) { return ev.id === event.id && ev.start.getDay() === event.start.getDay(); })
                                .forEach(function (e) {
                                if (isHighlighted) {
                                    segment.backgroundColor = e.color.secondary;
                                }
                                else {
                                    delete segment.backgroundColor;
                                }
                            });
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.refreshHeader = /**
         * @return {?}
         */
            function () {
                this.headerDays = this.getSchedulerViewDays({
                    viewDate: this.viewDate,
                    weekStartsOn: this.weekStartsOn,
                    startsWithToday: this.startsWithToday,
                    excluded: this.excludeDays
                });
            };
        /**
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.refreshBody = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.view = this.getSchedulerView({
                    events: this.events,
                    viewDate: this.viewDate,
                    weekStartsOn: this.weekStartsOn,
                    startsWithToday: this.startsWithToday,
                    excluded: this.excludeDays
                });
                if (this.dayModifier) {
                    this.days.forEach(function (day) { return _this.dayModifier(day); });
                }
                if (this.dayModifier || this.hourModifier || this.segmentModifier) {
                    this.view.days.forEach(function (day) {
                        if (_this.dayModifier) {
                            _this.dayModifier(day);
                        }
                        day.hours.forEach(function (hour) {
                            if (_this.hourModifier) {
                                _this.hourModifier(hour);
                            }
                            hour.segments.forEach(function (segment) {
                                if (_this.segmentModifier) {
                                    _this.segmentModifier(segment);
                                }
                            });
                        });
                    });
                }
            };
        /**
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.refreshAll = /**
         * @return {?}
         */
            function () {
                this.refreshHeader();
                this.refreshBody();
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.getSchedulerView = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                var _this = this;
                /** @type {?} */
                var events = args.events || [];
                /** @type {?} */
                var viewDate = args.viewDate;
                /** @type {?} */
                var weekStartsOn = args.weekStartsOn;
                /** @type {?} */
                var startsWithToday = args.startsWithToday;
                /** @type {?} */
                var excluded = args.excluded || [];
                /** @type {?} */
                var precision = args.precision || 'days';
                if (!events) {
                    events = [];
                }
                /** @type {?} */
                var startOfViewWeek = startsWithToday ? dateFns.startOfDay(viewDate) : dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
                /** @type {?} */
                var endOfViewWeek = startsWithToday ? dateFns.addDays(dateFns.endOfDay(viewDate), 6) : dateFns.endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
                /** @type {?} */
                var eventsInWeek = this.getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek });
                this.days = this.getSchedulerViewDays({
                    viewDate: viewDate,
                    weekStartsOn: weekStartsOn,
                    startsWithToday: startsWithToday,
                    excluded: excluded
                });
                this.days.forEach(function (day, dayIndex) {
                    /** @type {?} */
                    var hours = [];
                    _this.hours.forEach(function (hour, hourIndex) {
                        /** @type {?} */
                        var segments = [];
                        hour.segments.forEach(function (segment, segmentIndex) {
                            segment.date = dateFns.setDate(dateFns.setMonth(dateFns.setYear(segment.date, day.date.getFullYear()), day.date.getMonth()), day.date.getDate());
                            /** @type {?} */
                            var startOfSegment = segment.date;
                            /** @type {?} */
                            var endOfSegment = dateFns.addMinutes(segment.date, MINUTES_IN_HOUR / _this.hourSegments);
                            /** @type {?} */
                            var evts = _this.getEventsInPeriod({
                                events: eventsInWeek,
                                periodStart: startOfSegment,
                                periodEnd: endOfSegment
                            }).map(function (event) {
                                return ({
                                    id: event.id,
                                    start: event.start,
                                    end: event.end,
                                    title: event.title,
                                    content: event.content,
                                    color: event.color,
                                    actions: event.actions,
                                    status: event.status,
                                    cssClass: event.cssClass,
                                    startsBeforeSegment: event.start < startOfSegment,
                                    endsAfterSegment: event.end > endOfSegment,
                                    isHovered: false,
                                    isDisabled: event.isDisabled || false,
                                    isClickable: event.isClickable !== undefined && event.isClickable !== null ? event.isClickable : true
                                });
                            });
                            segments.push(/** @type {?} */ ({
                                segment: segment,
                                date: new Date(segment.date),
                                events: evts,
                                hasBorder: true
                            }));
                        });
                        /** @type {?} */
                        var hourDate = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
                        hours.push(/** @type {?} */ ({ hour: hour, date: hourDate, segments: segments, hasBorder: true }));
                    });
                    day.hours = hours;
                });
                return /** @type {?} */ ({
                    days: this.days
                });
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.isEventInPeriod = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                /** @type {?} */
                var event = args.event;
                /** @type {?} */
                var periodStart = args.periodStart;
                /** @type {?} */
                var periodEnd = args.periodEnd;
                /** @type {?} */
                var eventStart = event.start;
                /** @type {?} */
                var eventEnd = event.end || event.start;
                if (eventStart > periodStart && eventStart < periodEnd) {
                    return true;
                }
                if (eventEnd > periodStart && eventEnd < periodEnd) {
                    return true;
                }
                if (eventStart < periodStart && eventEnd > periodEnd) {
                    return true;
                }
                if (dateFns.isSameSecond(eventStart, periodStart) || dateFns.isSameSecond(eventStart, dateFns.subSeconds(periodEnd, 1))) {
                    return true;
                }
                if (dateFns.isSameSecond(dateFns.subSeconds(eventEnd, 1), periodStart) || dateFns.isSameSecond(eventEnd, periodEnd)) {
                    return true;
                }
                return false;
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.getEventsInPeriod = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                var _this = this;
                /** @type {?} */
                var events = args.events;
                /** @type {?} */
                var periodStart = args.periodStart;
                /** @type {?} */
                var periodEnd = args.periodEnd;
                return events.filter(function (event) { return _this.isEventInPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.getSchedulerViewDays = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                var _this = this;
                /** @type {?} */
                var viewDate = args.viewDate;
                /** @type {?} */
                var weekStartsOn = args.weekStartsOn;
                /** @type {?} */
                var startsWithToday = args.startsWithToday;
                /** @type {?} */
                var excluded = args.excluded || [];
                /** @type {?} */
                var start = startsWithToday ? new Date(viewDate) : dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
                /** @type {?} */
                var days = [];
                /** @type {?} */
                var loop = function (i) {
                    /** @type {?} */
                    var date = dateFns.addDays(start, i);
                    if (!excluded.some(function (e) { return date.getDay() === e; })) {
                        days.push(_this.getSchedulerDay({ date: date }));
                    }
                };
                for (var i = 0; i < DAYS_IN_WEEK; i++) {
                    loop(i);
                }
                return days;
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.getSchedulerDay = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                /** @type {?} */
                var date = args.date;
                /** @type {?} */
                var today = dateFns.startOfDay(new Date());
                return /** @type {?} */ ({
                    date: date,
                    isPast: date < today,
                    isToday: dateFns.isSameDay(date, today),
                    isFuture: date > today,
                    isWeekend: WEEKEND_DAY_NUMBERS.indexOf(dateFns.getDay(date)) > -1,
                    hours: []
                });
            };
        /**
         * @param {?} args
         * @return {?}
         */
        CalendarSchedulerViewComponent.prototype.getSchedulerViewHourGrid = /**
         * @param {?} args
         * @return {?}
         */
            function (args) {
                /** @type {?} */
                var viewDate = args.viewDate;
                /** @type {?} */
                var hourSegments = args.hourSegments;
                /** @type {?} */
                var dayStart = args.dayStart;
                /** @type {?} */
                var dayEnd = args.dayEnd;
                /** @type {?} */
                var hours = [];
                /** @type {?} */
                var startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
                /** @type {?} */
                var endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
                /** @type {?} */
                var segmentDuration = MINUTES_IN_HOUR / hourSegments;
                /** @type {?} */
                var startOfViewDay = dateFns.startOfDay(viewDate);
                /** @type {?} */
                var range = function (start, end) { return Array.from({ length: ((end + 1) - start) }, function (v, k) { return k + start; }); };
                /** @type {?} */
                var hoursInView = range(dayStart.hour, dayEnd.hour);
                // for (var i = 0; i < HOURS_IN_DAY; i++) {
                hoursInView.forEach(function (hour, i) {
                    /** @type {?} */
                    var segments = [];
                    for (var j = 0; j < hourSegments; j++) {
                        /** @type {?} */
                        var date = dateFns.addMinutes(dateFns.addHours(startOfViewDay, hour), j * segmentDuration);
                        if (date >= startOfView && date < endOfView) {
                            segments.push({
                                date: date,
                                isStart: j === 0
                            });
                        }
                    }
                    if (segments.length > 0) {
                        hours.push(/** @type {?} */ ({ segments: segments }));
                    }
                });
                return hours;
            };
        CalendarSchedulerViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-view',
                        template: "\n        <div class=\"cal-scheduler-view\" #weekViewContainer>\n            <calendar-scheduler-header\n                [days]=\"headerDays\"\n                [locale]=\"locale\"\n                [customTemplate]=\"headerTemplate\"\n                (dayClicked)=\"dayClicked.emit($event)\">\n            </calendar-scheduler-header>\n\n            <div class=\"cal-scheduler\">\n                <div class=\"cal-scheduler-hour-rows aside\">\n                    <div class=\"cal-scheduler-hour align-center horizontal\" *ngFor=\"let hour of hours\">\n                      <div class=\"cal-scheduler-time\">\n                        <div class=\"cal-scheduler-hour-segment\" *ngFor=\"let segment of hour.segments\">\n                            {{ segment.date | calendarDate:'dayViewHour':locale }}\n                        </div>\n                      </div>\n                    </div>\n                </div>\n\n                <div class=\"cal-scheduler-cols aside\">\n                    <div class=\"cal-scheduler-col\" *ngFor=\"let day of view.days\">\n                        <calendar-scheduler-cell\n                            *ngFor=\"let hour of day.hours\"\n                            [ngClass]=\"day?.cssClass\"\n                            [day]=\"day\"\n                            [hour]=\"hour\"\n                            [locale]=\"locale\"\n                            [tooltipPlacement]=\"tooltipPlacement\"\n                            [showActions]=\"showActions\"\n                            [customTemplate]=\"cellTemplate\"\n                            [eventTemplate]=\"eventTemplate\"\n                            (click)=\"dayClicked.emit({date: day})\"\n                            (highlightSegment)=\"toggleSegmentHighlight($event.event, true)\"\n                            (unhighlightSegment)=\"toggleSegmentHighlight($event.event, false)\"\n                            (segmentClicked)=\"segmentClicked.emit({segment: $event.segment})\"\n                            (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n                        </calendar-scheduler-cell>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                        styles: [".cal-scheduler-view .cal-scheduler-headers{display:flex;flex-flow:row wrap;margin-bottom:3px;border:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .aside{flex:1 0}.cal-scheduler-view .cal-scheduler-headers .aside.cal-header-clock{max-width:5em}.cal-scheduler-view .cal-scheduler-headers .cal-header{flex:1;text-align:center;padding:5px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cal-scheduler-view .cal-scheduler-headers .cal-header:not(:last-child){border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .cal-header:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-weekend span{color:#8b0000}.cal-scheduler-view .cal-scheduler-headers .cal-header span{font-weight:400;opacity:.5}.cal-scheduler-view .cal-scheduler,.cal-scheduler-view .cal-scheduler-headers .cal-header-cols{display:flex;flex-flow:row wrap}.cal-scheduler-view .cal-scheduler .aside{flex:1 0}.cal-scheduler-view .cal-scheduler .aside.cal-scheduler-hour-rows{max-width:5em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows{width:auto!important;border:1px solid #e1e1e1;overflow:hidden;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour{display:flex;height:7.25em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:nth-child(odd){background-color:#fafafa}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:not(:last-child){border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time{display:flex;flex-flow:column wrap;width:100%;font-weight:700;text-align:center}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment{flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols{display:flex;flex-flow:row wrap;border-top:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col{display:flex;flex-flow:column wrap;flex:1 0;border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell{display:flex;flex-flow:column wrap;flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled .cal-scheduler-events{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments{display:flex;flex-flow:column wrap;flex:1 0;border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled .cal-scheduler-event{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(.has-events):hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event{flex:1 0;display:flex;flex-flow:row wrap;padding:0 10px;font-size:12px;margin:0 2px;line-height:30px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;transition:all ease-out .2s;filter:brightness(100%);-webkit-filter:brightness(100%);-webkit-backface-visibility:hidden}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-starts-within-segment{border-top-left-radius:.3em;border-top-right-radius:.3em;margin-top:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-ends-within-segment{border-bottom-left-radius:.3em;border-bottom-right-radius:.3em;margin-bottom:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-disabled{background-color:gray!important;filter:grayscale(100%);-webkit-filter:grayscale(100%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-not-clickable{cursor:not-allowed!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled).hovered,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled):hover{cursor:pointer;filter:brightness(80%);-webkit-filter:brightness(80%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container{position:relative;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-title{font-size:16px;font-weight:700}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status{position:absolute;top:25%;right:1%;width:16px;height:16px;background:grey;border-radius:50px;border:1px solid #000}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.ok{background:green}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.warning{background:orange}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.danger{background:red}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-content-container{width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container{flex:1 0;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions{position:absolute;bottom:5px;right:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions .cal-scheduler-event-action{text-decoration:none}"],
                        encapsulation: core.ViewEncapsulation.None
                    },] },
        ];
        /** @nocollapse */
        CalendarSchedulerViewComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef },
                { type: String, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] }] },
                { type: SchedulerConfig }
            ];
        };
        CalendarSchedulerViewComponent.propDecorators = {
            viewDate: [{ type: core.Input }],
            events: [{ type: core.Input }],
            hourSegments: [{ type: core.Input }],
            excludeDays: [{ type: core.Input }],
            startsWithToday: [{ type: core.Input }],
            showActions: [{ type: core.Input }],
            dayModifier: [{ type: core.Input }],
            hourModifier: [{ type: core.Input }],
            segmentModifier: [{ type: core.Input }],
            refresh: [{ type: core.Input }],
            locale: [{ type: core.Input }],
            tooltipPlacement: [{ type: core.Input }],
            weekStartsOn: [{ type: core.Input }],
            headerTemplate: [{ type: core.Input }],
            cellTemplate: [{ type: core.Input }],
            eventTemplate: [{ type: core.Input }],
            precision: [{ type: core.Input }],
            dayStartHour: [{ type: core.Input }],
            dayStartMinute: [{ type: core.Input }],
            dayEndHour: [{ type: core.Input }],
            dayEndMinute: [{ type: core.Input }],
            dayClicked: [{ type: core.Output }],
            segmentClicked: [{ type: core.Output }],
            eventClicked: [{ type: core.Output }]
        };
        return CalendarSchedulerViewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment = momentImported;
    var CalendarSchedulerCellComponent = (function () {
        function CalendarSchedulerCellComponent() {
            this.showActions = true;
            this.highlightSegment = new core.EventEmitter();
            this.unhighlightSegment = new core.EventEmitter();
            this.segmentClicked = new core.EventEmitter();
            this.eventClicked = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        CalendarSchedulerCellComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.title = moment(this.day.date).format('dddd L');
            };
        /**
         * @param {?} mouseEvent
         * @param {?} segment
         * @param {?} event
         * @return {?}
         */
        CalendarSchedulerCellComponent.prototype.onMouseEnter = /**
         * @param {?} mouseEvent
         * @param {?} segment
         * @param {?} event
         * @return {?}
         */
            function (mouseEvent, segment, event) {
                if (!event.isDisabled && !segment.isDisabled) {
                    this.highlightSegment.emit({ event: event });
                }
            };
        /**
         * @param {?} mouseEvent
         * @param {?} segment
         * @param {?} event
         * @return {?}
         */
        CalendarSchedulerCellComponent.prototype.onMouseLeave = /**
         * @param {?} mouseEvent
         * @param {?} segment
         * @param {?} event
         * @return {?}
         */
            function (mouseEvent, segment, event) {
                if (!event.isDisabled && !segment.isDisabled) {
                    this.unhighlightSegment.emit({ event: event });
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} segment
         * @return {?}
         */
        CalendarSchedulerCellComponent.prototype.onSegmentClick = /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} segment
         * @return {?}
         */
            function (mouseEvent, segment) {
                if (mouseEvent.stopPropagation) {
                    mouseEvent.stopPropagation();
                }
                if (segment.events.length === 0) {
                    this.segmentClicked.emit({ segment: segment });
                }
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} event
         * @return {?}
         */
        CalendarSchedulerCellComponent.prototype.onEventClick = /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} event
         * @return {?}
         */
            function (mouseEvent, event) {
                if (mouseEvent.stopPropagation) {
                    mouseEvent.stopPropagation();
                }
                if (event.isClickable) {
                    this.eventClicked.emit({ event: event });
                }
            };
        CalendarSchedulerCellComponent.decorators = [
            { type: core.Component, args: [{
                        // [class.no-border]': '!day.hasBorder
                        selector: 'calendar-scheduler-cell',
                        template: "\n        <ng-template #defaultTemplate>\n            <div class=\"cal-scheduler-segments\" *ngIf=\"hour.segments.length > 0\"\n                [ngClass]=\"hour?.cssClass\"\n                [class.no-border]=\"!hour.hasBorder\">\n                <div class=\"cal-scheduler-segment\"\n                    *ngFor=\"let segment of hour.segments; let si = index\"\n                    [title]=\"title\"\n                    [ngClass]=\"segment?.cssClass\"\n                    [class.has-events]=\"segment.events.length > 0\"\n                    [class.cal-disabled]=\"segment.isDisabled\"\n                    [style.backgroundColor]=\"segment.backgroundColor\"\n                    [class.no-border]=\"!segment.hasBorder\"\n                    (mwlClick)=\"onSegmentClick($event, segment)\">\n\n                    <div class=\"cal-scheduler-events\" *ngIf=\"segment.events.length > 0\">\n                        <calendar-scheduler-event\n                            *ngFor=\"let event of segment.events\"\n                            [day]=\"day\"\n                            [hour]=\"hour\"\n                            [segment]=\"segment\"\n                            [event]=\"event\"\n                            (mouseenter)=\"onMouseEnter($event, segment, event)\"\n                            (mouseleave)=\"onMouseLeave($event, segment, event)\"\n                            [tooltipPlacement]=\"tooltipPlacement\"\n                            [showActions]=\"showActions\"\n                            [customTemplate]=\"eventTemplate\"\n                            (eventClicked)=\"onEventClick($event, event)\">\n                        </calendar-scheduler-event>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                day: day,\n                hour: hour,\n                locale: locale,\n                tooltipPlacement: tooltipPlacement,\n                showActions: showActions,\n                eventTemplate: eventTemplate,\n                highlightSegment: highlightSegment,\n                unhighlightSegment: unhighlightSegment,\n                segmentClicked: segmentClicked,\n                eventClicked: eventClicked\n            }\">\n        </ng-template>\n    ",
                        host: {
                            'class': 'cal-scheduler-cell',
                            '[class.cal-past]': 'day.isPast',
                            '[class.cal-today]': 'day.isToday',
                            '[class.cal-future]': 'day.isFuture',
                            '[class.cal-weekend]': 'day.isWeekend',
                            '[class.cal-in-month]': 'day.inMonth',
                            '[class.cal-out-month]': '!day.inMonth',
                            '[style.backgroundColor]': 'day.backgroundColor'
                        }
                    },] },
        ];
        CalendarSchedulerCellComponent.propDecorators = {
            title: [{ type: core.Input }],
            day: [{ type: core.Input }],
            hour: [{ type: core.Input }],
            locale: [{ type: core.Input }],
            tooltipPlacement: [{ type: core.Input }],
            showActions: [{ type: core.Input }],
            customTemplate: [{ type: core.Input }],
            eventTemplate: [{ type: core.Input }],
            highlightSegment: [{ type: core.Output }],
            unhighlightSegment: [{ type: core.Output }],
            segmentClicked: [{ type: core.Output }],
            eventClicked: [{ type: core.Output }]
        };
        return CalendarSchedulerCellComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CalendarSchedulerHeaderComponent = (function () {
        function CalendarSchedulerHeaderComponent() {
            this.dayClicked = new core.EventEmitter();
        }
        CalendarSchedulerHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-header',
                        template: "\n        <ng-template #defaultTemplate>\n            <div class=\"cal-scheduler-headers\">\n                <div class=\"cal-header aside cal-header-clock align-center\">\n                    <i class=\"material-icons md-32\" style=\"margin:auto;\">schedule</i>\n                </div>\n\n                <div class=\"cal-header-cols aside\">\n                    <div\n                        class=\"cal-header\"\n                        *ngFor=\"let day of days\"\n                        [class.cal-past]=\"day.isPast\"\n                        [class.cal-today]=\"day.isToday\"\n                        [class.cal-future]=\"day.isFuture\"\n                        [class.cal-weekend]=\"day.isWeekend\"\n                        [class.cal-drag-over]=\"day.dragOver\"\n                        (mwlClick)=\"dayClicked.emit({date: day.date})\">\n                        <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n                        <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{days: days, locale: locale, dayClicked: dayClicked}\">\n        </ng-template>\n    "
                    },] },
        ];
        CalendarSchedulerHeaderComponent.propDecorators = {
            days: [{ type: core.Input }],
            locale: [{ type: core.Input }],
            customTemplate: [{ type: core.Input }],
            dayClicked: [{ type: core.Output }]
        };
        return CalendarSchedulerHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$1 = momentImported;
    /**
     * [mwlCalendarTooltip]="event.title | calendarEventTitle:'weekTooltip':event"
     * [tooltipPlacement]="tooltipPlacement"
     */
    var CalendarSchedulerEventComponent = (function () {
        function CalendarSchedulerEventComponent(renderer) {
            this.renderer = renderer;
            this.showActions = true;
            this.eventClicked = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        CalendarSchedulerEventComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.segment.hasBorder = this.hour.hasBorder = !this.event.endsAfterSegment;
                this.title = moment$1(this.event.start).format('dddd L');
                this.checkEnableState();
            };
        /**
         * @return {?}
         */
        CalendarSchedulerEventComponent.prototype.checkEnableState = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.segment.isDisabled) {
                    this.day.hours.forEach(function (hour) {
                        hour.segments.forEach(function (segment) {
                            segment.events.filter(function (event) { return event.id === _this.event.id && dateFns.isSameDay(event.start, _this.event.start); })
                                .forEach(function (event) {
                                event.isDisabled = true;
                            });
                        });
                    });
                }
            };
        /**
         * @return {?}
         */
        CalendarSchedulerEventComponent.prototype.highlightEvent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // let events: CalendarSchedulerEvent[] = this.day.hours
                //    .filter(h => h.segments.some(s => s.events.some(e => e.id === this.event.id)))
                //    .map(h =>
                //        h.segments.map(s =>
                //            s.events.filter(e => e.id === this.event.id)
                //        ).reduce((prev, curr) => prev.concat(curr))
                //    )
                //    .reduce((prev, curr) => prev.concat(curr));
                this.day.hours.forEach(function (hour) {
                    hour.segments.forEach(function (segment) {
                        segment.events.filter(function (event) { return event.id === _this.event.id && dateFns.isSameDay(event.start, _this.event.start); })
                            .forEach(function (event) {
                            event.isHovered = true;
                        });
                    });
                });
            };
        /**
         * @return {?}
         */
        CalendarSchedulerEventComponent.prototype.unhighlightEvent = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.day.hours.forEach(function (hour) {
                    hour.segments.forEach(function (segment) {
                        segment.events.filter(function (event) { return event.id === _this.event.id && dateFns.isSameDay(event.start, _this.event.start); })
                            .forEach(function (event) {
                            event.isHovered = false;
                        });
                    });
                });
            };
        CalendarSchedulerEventComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-event',
                        template: "\n        <ng-template #defaultTemplate>\n            <div\n                class=\"cal-scheduler-event\"\n                [title]=\"title\"\n                [class.cal-starts-within-segment]=\"!event.startsBeforeSegment\"\n                [class.cal-ends-within-segment]=\"!event.endsAfterSegment\"\n                [class.hovered]=\"event.isHovered\"\n                [class.cal-disabled]=\"event.isDisabled || segment.isDisabled\"\n                [class.cal-not-clickable]=\"!event.isClickable\"\n                [style.backgroundColor]=\"event.color.primary\"\n                [ngClass]=\"event?.cssClass\"\n                (mwlClick)=\"eventClicked.emit({event: event})\"\n                (mouseenter)=\"highlightEvent()\"\n                (mouseleave)=\"unhighlightEvent()\">\n                <calendar-scheduler-event-title *ngIf=\"!event.startsBeforeSegment\"\n                    [event]=\"event\"\n                    view=\"week\">\n                </calendar-scheduler-event-title>\n                <calendar-scheduler-event-content *ngIf=\"!event.startsBeforeSegment\"\n                    [event]=\"event\">\n                </calendar-scheduler-event-content>\n                <calendar-scheduler-event-actions [event]=\"event\" *ngIf=\"showActions && event.isClickable && !event.endsAfterSegment\"></calendar-scheduler-event-actions>\n                <calendar-scheduler-event-actions [event]=\"event\" *ngIf=\"showActions && event.isDisabled && !event.endsAfterSegment\"></calendar-scheduler-event-actions>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                day: day,\n                hour: hour,\n                segment: segment,\n                event: event,\n                tooltipPlacement: tooltipPlacement,\n                showActions: showActions,\n                customTemplate: customTemplate,\n                eventClicked: eventClicked\n            }\">\n        </ng-template>\n    ",
                        host: {
                            'class': 'cal-scheduler-event-container'
                        }
                    },] },
        ];
        /** @nocollapse */
        CalendarSchedulerEventComponent.ctorParameters = function () {
            return [
                { type: core.Renderer2 }
            ];
        };
        CalendarSchedulerEventComponent.propDecorators = {
            title: [{ type: core.Input }],
            day: [{ type: core.Input }],
            hour: [{ type: core.Input }],
            segment: [{ type: core.Input }],
            event: [{ type: core.Input }],
            tooltipPlacement: [{ type: core.Input }],
            showActions: [{ type: core.Input }],
            customTemplate: [{ type: core.Input }],
            eventClicked: [{ type: core.Output }]
        };
        return CalendarSchedulerEventComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CalendarSchedulerEventTitleComponent = (function () {
        function CalendarSchedulerEventTitleComponent() {
        }
        CalendarSchedulerEventTitleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-event-title',
                        template: "\n        <div\n            class=\"cal-scheduler-event-title\"\n            [innerHTML]=\"event.title | schedulerEventTitle:view:event\">\n        </div>\n        <div *ngIf=\"event.status\"\n            class=\"cal-scheduler-event-status\"\n            [class.ok]=\"event.status === 'ok'\"\n            [class.warning]=\"event.status === 'warning'\"\n            [class.danger]=\"event.status === 'danger'\">\n        </div>\n    ",
                        host: {
                            'class': 'cal-scheduler-event-title-container'
                        }
                    },] },
        ];
        CalendarSchedulerEventTitleComponent.propDecorators = {
            event: [{ type: core.Input }],
            view: [{ type: core.Input }]
        };
        return CalendarSchedulerEventTitleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CalendarSchedulerEventContentComponent = (function () {
        function CalendarSchedulerEventContentComponent() {
        }
        CalendarSchedulerEventContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-event-content',
                        template: "\n        <div *ngIf=\"event.content\"\n            class=\"cal-scheduler-event-content\"\n            [innerHTML]=\"event.content\">\n        </div>\n    ",
                        host: {
                            'class': 'cal-scheduler-event-content-container'
                        }
                    },] },
        ];
        CalendarSchedulerEventContentComponent.propDecorators = {
            event: [{ type: core.Input }]
        };
        return CalendarSchedulerEventContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CalendarSchedulerEventActionsComponent = (function () {
        function CalendarSchedulerEventActionsComponent() {
            this.actions = [];
        }
        /**
         * @return {?}
         */
        CalendarSchedulerEventActionsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.actions = this.event.isDisabled ?
                    this.event.actions.filter(function (a) { return !a.when || a.when === 'disabled'; }) :
                    this.event.actions.filter(function (a) { return !a.when || a.when === 'enabled'; });
            };
        /**
         * @hidden
         */
        /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} action
         * @param {?} event
         * @return {?}
         */
        CalendarSchedulerEventActionsComponent.prototype.onActionClick = /**
         * @hidden
         * @param {?} mouseEvent
         * @param {?} action
         * @param {?} event
         * @return {?}
         */
            function (mouseEvent, action, event) {
                if (mouseEvent.stopPropagation) {
                    mouseEvent.stopPropagation();
                }
                action.onClick(event);
            };
        CalendarSchedulerEventActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'calendar-scheduler-event-actions',
                        template: "\n        <span *ngIf=\"event.actions\" class=\"cal-scheduler-event-actions\">\n            <a\n                class=\"cal-scheduler-event-action\"\n                href=\"javascript:;\"\n                *ngFor=\"let action of actions\"\n                (mwlClick)=\"onActionClick($event, action, event)\"\n                [ngClass]=\"action.cssClass\"\n                [innerHtml]=\"action.label\"\n                [title]=\"action.title\">\n            </a>\n        </span>\n    ",
                        host: {
                            'class': 'cal-scheduler-event-actions-container'
                        }
                    },] },
        ];
        CalendarSchedulerEventActionsComponent.propDecorators = {
            event: [{ type: core.Input }]
        };
        return CalendarSchedulerEventActionsComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SchedulerEventTitleFormatter = (function (_super) {
        __extends(SchedulerEventTitleFormatter, _super);
        function SchedulerEventTitleFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SchedulerEventTitleFormatter;
    }(angularCalendar.CalendarEventTitleFormatter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SchedulerEventTitlePipe = (function () {
        function SchedulerEventTitlePipe(schedulerEventTitle) {
            this.schedulerEventTitle = schedulerEventTitle;
        }
        /**
         * @param {?} title
         * @param {?} titleType
         * @param {?} event
         * @return {?}
         */
        SchedulerEventTitlePipe.prototype.transform = /**
         * @param {?} title
         * @param {?} titleType
         * @param {?} event
         * @return {?}
         */
            function (title, titleType, event) {
                return this.schedulerEventTitle[titleType](event);
            };
        SchedulerEventTitlePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'schedulerEventTitle'
                    },] },
        ];
        /** @nocollapse */
        SchedulerEventTitlePipe.ctorParameters = function () {
            return [
                { type: SchedulerEventTitleFormatter }
            ];
        };
        return SchedulerEventTitlePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SchedulerDateFormatter = (function (_super) {
        __extends(SchedulerDateFormatter, _super);
        function SchedulerDateFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * The time formatting down the left hand side of the day view
         * @param {?} __0
         * @return {?}
         */
        SchedulerDateFormatter.prototype.dayViewHour = /**
         * The time formatting down the left hand side of the day view
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var date = _a.date, locale = _a.locale;
                return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
            };
        /**
         * @param {?} __0
         * @return {?}
         */
        SchedulerDateFormatter.prototype.weekViewTitle = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var date = _a.date, locale = _a.locale;
                /** @type {?} */
                var year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
                /** @type {?} */
                var month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
                /** @type {?} */
                var firstDay = date.getDate();
                if (date.getDay() === 0) {
                    firstDay += 1;
                }
                /** @type {?} */
                var lastDay = firstDay + 6;
                /** @type {?} */
                var firstDayMonth = month;
                /** @type {?} */
                var lastDayMonth = month;
                /** @type {?} */
                var firstDayYear = year;
                /** @type {?} */
                var lastDayYear = year;
                if (firstDay < 1) {
                    /** @type {?} */
                    var prevMonthDate = new Date(date.getFullYear(), date.getMonth() - 1);
                    firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
                    /** @type {?} */
                    var daysInPrevMonth = this.daysInMonth(prevMonthDate);
                    /** @type {?} */
                    var i = 0;
                    /** @type {?} */
                    var prevMonthDay = daysInPrevMonth;
                    for (i = 0; i < Math.abs(firstDay); i++) {
                        prevMonthDay--;
                    }
                    firstDay = prevMonthDay;
                    /** @type {?} */
                    var prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
                    if (Number(prevMonthYear) < Number(year)) {
                        firstDayYear = prevMonthYear;
                    }
                }
                /** @type {?} */
                var daysInMonth = this.daysInMonth(date);
                if (lastDay > daysInMonth) {
                    /** @type {?} */
                    var nextMonthDate = new Date(date.getFullYear(), date.getMonth() + 1);
                    lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
                    /** @type {?} */
                    var i = 0;
                    /** @type {?} */
                    var nextMonthDay = 0;
                    for (i = 0; i < (lastDay - daysInMonth); i++) {
                        nextMonthDay++;
                    }
                    lastDay = nextMonthDay;
                    /** @type {?} */
                    var nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
                    if (Number(nextMonthYear) > Number(year)) {
                        lastDayYear = nextMonthYear;
                    }
                }
                return "" + firstDay + (firstDayMonth !== lastDayMonth ? ' ' + firstDayMonth : '') +
                    (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
                    (" - " + lastDay + " " + lastDayMonth + " " + lastDayYear);
            };
        /**
         * @param {?} anyDateInMonth
         * @return {?}
         */
        SchedulerDateFormatter.prototype.daysInMonth = /**
         * @param {?} anyDateInMonth
         * @return {?}
         */
            function (anyDateInMonth) {
                return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
            };
        return SchedulerDateFormatter;
    }(angularCalendar.CalendarDateFormatter));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} period
     * @param {?} date
     * @param {?} amount
     * @return {?}
     */
    function addPeriod(period, date, amount) {
        return {
            day: dateFns.addDays,
            week: dateFns.addWeeks,
            month: dateFns.addMonths
        }[period](date, amount);
    }
    /**
     * @param {?} period
     * @param {?} date
     * @param {?} amount
     * @return {?}
     */
    function subPeriod(period, date, amount) {
        return {
            day: dateFns.subDays,
            week: dateFns.subWeeks,
            month: dateFns.subMonths
        }[period](date, amount);
    }
    /**
     * @param {?} period
     * @param {?} date
     * @return {?}
     */
    function startOfPeriod(period, date) {
        return {
            day: dateFns.startOfDay,
            week: dateFns.startOfWeek,
            month: dateFns.startOfMonth
        }[period](date);
    }
    /**
     * @param {?} period
     * @param {?} date
     * @return {?}
     */
    function endOfPeriod(period, date) {
        return {
            day: dateFns.endOfDay,
            week: dateFns.endOfWeek,
            month: dateFns.endOfMonth
        }[period](date);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SCHEDULER_CONFIG = new core.InjectionToken('SchedulerConfig');
    /**
     * @param {?} config
     * @return {?}
     */
    function provideAuthConfig(config) {
        return new SchedulerConfig(config);
    }
    /**
     * The main module of this library. Example usage:
     *
     * ```typescript
     * import { CalenderModule } from 'angular-calendar';
     * import { SchedulerModule } from 'angular-calendar-scheduler';
     *
     * \@NgModule({
     *   imports: [
     *     CalenderModule.forRoot(),
     *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
     *   ]
     * })
     * class MyModule {}
     * ```
     *
     */
    var SchedulerModule = (function () {
        function SchedulerModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        SchedulerModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: SchedulerModule,
                    providers: [
                        { provide: SCHEDULER_CONFIG, useValue: config },
                        { provide: SchedulerConfig, useFactory: provideAuthConfig, deps: [SCHEDULER_CONFIG] }
                    ]
                };
            };
        SchedulerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            angularCalendar.CalendarModule.forRoot()
                        ],
                        declarations: [
                            CalendarSchedulerViewComponent,
                            CalendarSchedulerCellComponent,
                            CalendarSchedulerHeaderComponent,
                            CalendarSchedulerEventComponent,
                            CalendarSchedulerEventTitleComponent,
                            CalendarSchedulerEventContentComponent,
                            CalendarSchedulerEventActionsComponent,
                            SchedulerEventTitlePipe
                        ],
                        providers: [
                            SchedulerEventTitlePipe,
                            SchedulerEventTitleFormatter,
                            SchedulerDateFormatter
                        ],
                        exports: [
                            CalendarSchedulerViewComponent,
                            CalendarSchedulerCellComponent,
                            CalendarSchedulerHeaderComponent,
                            CalendarSchedulerEventComponent,
                            CalendarSchedulerEventTitleComponent,
                            CalendarSchedulerEventContentComponent,
                            CalendarSchedulerEventActionsComponent
                        ]
                    },] },
        ];
        return SchedulerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.SCHEDULER_CONFIG = SCHEDULER_CONFIG;
    exports.provideAuthConfig = provideAuthConfig;
    exports.SchedulerModule = SchedulerModule;
    exports.CalendarSchedulerViewComponent = CalendarSchedulerViewComponent;
    exports.SchedulerDateFormatter = SchedulerDateFormatter;
    exports.SchedulerEventTitleFormatter = SchedulerEventTitleFormatter;
    exports.SchedulerEventTitlePipe = SchedulerEventTitlePipe;
    exports.addPeriod = addPeriod;
    exports.subPeriod = subPeriod;
    exports.startOfPeriod = startOfPeriod;
    exports.endOfPeriod = endOfPeriod;
    exports.ɵb = CalendarSchedulerCellComponent;
    exports.ɵg = CalendarSchedulerEventActionsComponent;
    exports.ɵf = CalendarSchedulerEventContentComponent;
    exports.ɵe = CalendarSchedulerEventTitleComponent;
    exports.ɵd = CalendarSchedulerEventComponent;
    exports.ɵc = CalendarSchedulerHeaderComponent;
    exports.ɵa = SchedulerConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,