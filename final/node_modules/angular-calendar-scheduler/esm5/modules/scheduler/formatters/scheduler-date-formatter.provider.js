/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CalendarDateFormatter } from 'angular-calendar';
var SchedulerDateFormatter = /** @class */ (function (_super) {
    tslib_1.__extends(SchedulerDateFormatter, _super);
    function SchedulerDateFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The time formatting down the left hand side of the day view
     * @param {?} __0
     * @return {?}
     */
    SchedulerDateFormatter.prototype.dayViewHour = /**
     * The time formatting down the left hand side of the day view
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var date = _a.date, locale = _a.locale;
        return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    SchedulerDateFormatter.prototype.weekViewTitle = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var date = _a.date, locale = _a.locale;
        /** @type {?} */
        var year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        /** @type {?} */
        var month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
        /** @type {?} */
        var firstDay = date.getDate();
        if (date.getDay() === 0) {
            firstDay += 1;
        }
        /** @type {?} */
        var lastDay = firstDay + 6;
        /** @type {?} */
        var firstDayMonth = month;
        /** @type {?} */
        var lastDayMonth = month;
        /** @type {?} */
        var firstDayYear = year;
        /** @type {?} */
        var lastDayYear = year;
        if (firstDay < 1) {
            /** @type {?} */
            var prevMonthDate = new Date(date.getFullYear(), date.getMonth() - 1);
            firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
            /** @type {?} */
            var daysInPrevMonth = this.daysInMonth(prevMonthDate);
            /** @type {?} */
            var i = 0;
            /** @type {?} */
            var prevMonthDay = daysInPrevMonth;
            for (i = 0; i < Math.abs(firstDay); i++) {
                prevMonthDay--;
            }
            firstDay = prevMonthDay;
            /** @type {?} */
            var prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
            if (Number(prevMonthYear) < Number(year)) {
                firstDayYear = prevMonthYear;
            }
        }
        /** @type {?} */
        var daysInMonth = this.daysInMonth(date);
        if (lastDay > daysInMonth) {
            /** @type {?} */
            var nextMonthDate = new Date(date.getFullYear(), date.getMonth() + 1);
            lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
            /** @type {?} */
            var i = 0;
            /** @type {?} */
            var nextMonthDay = 0;
            for (i = 0; i < (lastDay - daysInMonth); i++) {
                nextMonthDay++;
            }
            lastDay = nextMonthDay;
            /** @type {?} */
            var nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
            if (Number(nextMonthYear) > Number(year)) {
                lastDayYear = nextMonthYear;
            }
        }
        return "" + firstDay + (firstDayMonth !== lastDayMonth ? ' ' + firstDayMonth : '') +
            (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
            (" - " + lastDay + " " + lastDayMonth + " " + lastDayYear);
    };
    /**
     * @param {?} anyDateInMonth
     * @return {?}
     */
    SchedulerDateFormatter.prototype.daysInMonth = /**
     * @param {?} anyDateInMonth
     * @return {?}
     */
    function (anyDateInMonth) {
        return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
    };
    return SchedulerDateFormatter;
}(CalendarDateFormatter));
export { SchedulerDateFormatter };

//# sourceMappingURL=data:application/json;base64,