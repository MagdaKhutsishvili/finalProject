/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, TemplateRef, Renderer2 } from '@angular/core';
import { isSameDay } from 'date-fns';
import * as momentImported from 'moment';
/** @type {?} */
var moment = momentImported;
/**
 * [mwlCalendarTooltip]="event.title | calendarEventTitle:'weekTooltip':event"
 * [tooltipPlacement]="tooltipPlacement"
 */
var CalendarSchedulerEventComponent = /** @class */ (function () {
    function CalendarSchedulerEventComponent(renderer) {
        this.renderer = renderer;
        this.showActions = true;
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CalendarSchedulerEventComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.segment.hasBorder = this.hour.hasBorder = !this.event.endsAfterSegment;
        this.title = moment(this.event.start).format('dddd L');
        this.checkEnableState();
    };
    /**
     * @return {?}
     */
    CalendarSchedulerEventComponent.prototype.checkEnableState = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.segment.isDisabled) {
            this.day.hours.forEach(function (hour) {
                hour.segments.forEach(function (segment) {
                    segment.events.filter(function (event) { return event.id === _this.event.id && isSameDay(event.start, _this.event.start); })
                        .forEach(function (event) {
                        event.isDisabled = true;
                    });
                });
            });
        }
    };
    /**
     * @return {?}
     */
    CalendarSchedulerEventComponent.prototype.highlightEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // let events: CalendarSchedulerEvent[] = this.day.hours
        //    .filter(h => h.segments.some(s => s.events.some(e => e.id === this.event.id)))
        //    .map(h =>
        //        h.segments.map(s =>
        //            s.events.filter(e => e.id === this.event.id)
        //        ).reduce((prev, curr) => prev.concat(curr))
        //    )
        //    .reduce((prev, curr) => prev.concat(curr));
        this.day.hours.forEach(function (hour) {
            hour.segments.forEach(function (segment) {
                segment.events.filter(function (event) { return event.id === _this.event.id && isSameDay(event.start, _this.event.start); })
                    .forEach(function (event) {
                    event.isHovered = true;
                });
            });
        });
    };
    /**
     * @return {?}
     */
    CalendarSchedulerEventComponent.prototype.unhighlightEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.day.hours.forEach(function (hour) {
            hour.segments.forEach(function (segment) {
                segment.events.filter(function (event) { return event.id === _this.event.id && isSameDay(event.start, _this.event.start); })
                    .forEach(function (event) {
                    event.isHovered = false;
                });
            });
        });
    };
    CalendarSchedulerEventComponent.decorators = [
        { type: Component, args: [{
                    selector: 'calendar-scheduler-event',
                    template: "\n        <ng-template #defaultTemplate>\n            <div\n                class=\"cal-scheduler-event\"\n                [title]=\"title\"\n                [class.cal-starts-within-segment]=\"!event.startsBeforeSegment\"\n                [class.cal-ends-within-segment]=\"!event.endsAfterSegment\"\n                [class.hovered]=\"event.isHovered\"\n                [class.cal-disabled]=\"event.isDisabled || segment.isDisabled\"\n                [class.cal-not-clickable]=\"!event.isClickable\"\n                [style.backgroundColor]=\"event.color.primary\"\n                [ngClass]=\"event?.cssClass\"\n                (mwlClick)=\"eventClicked.emit({event: event})\"\n                (mouseenter)=\"highlightEvent()\"\n                (mouseleave)=\"unhighlightEvent()\">\n                <calendar-scheduler-event-title *ngIf=\"!event.startsBeforeSegment\"\n                    [event]=\"event\"\n                    view=\"week\">\n                </calendar-scheduler-event-title>\n                <calendar-scheduler-event-content *ngIf=\"!event.startsBeforeSegment\"\n                    [event]=\"event\">\n                </calendar-scheduler-event-content>\n                <calendar-scheduler-event-actions [event]=\"event\" *ngIf=\"showActions && event.isClickable && !event.endsAfterSegment\"></calendar-scheduler-event-actions>\n                <calendar-scheduler-event-actions [event]=\"event\" *ngIf=\"showActions && event.isDisabled && !event.endsAfterSegment\"></calendar-scheduler-event-actions>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                day: day,\n                hour: hour,\n                segment: segment,\n                event: event,\n                tooltipPlacement: tooltipPlacement,\n                showActions: showActions,\n                customTemplate: customTemplate,\n                eventClicked: eventClicked\n            }\">\n        </ng-template>\n    ",
                    host: {
                        'class': 'cal-scheduler-event-container'
                    }
                },] },
    ];
    /** @nocollapse */
    CalendarSchedulerEventComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    CalendarSchedulerEventComponent.propDecorators = {
        title: [{ type: Input }],
        day: [{ type: Input }],
        hour: [{ type: Input }],
        segment: [{ type: Input }],
        event: [{ type: Input }],
        tooltipPlacement: [{ type: Input }],
        showActions: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventClicked: [{ type: Output }]
    };
    return CalendarSchedulerEventComponent;
}());
export { CalendarSchedulerEventComponent };
if (false) {
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.title;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.day;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.hour;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.segment;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.event;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.tooltipPlacement;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.showActions;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.customTemplate;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.eventClicked;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,