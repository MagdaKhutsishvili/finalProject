/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CalendarModule } from 'angular-calendar';
import { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
import { CalendarSchedulerCellComponent } from './calendar-scheduler-cell.component';
import { CalendarSchedulerHeaderComponent } from './calendar-scheduler-header.component';
import { CalendarSchedulerEventComponent } from './calendar-scheduler-event.component';
import { CalendarSchedulerEventTitleComponent } from './calendar-scheduler-event-title.component';
import { CalendarSchedulerEventContentComponent } from './calendar-scheduler-event-content.component';
import { CalendarSchedulerEventActionsComponent } from './calendar-scheduler-event-actions.component';
import { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
import { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
import { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
export { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
export { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
export { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
export { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
export { addPeriod, subPeriod, startOfPeriod, endOfPeriod } from './calendar-utils';
import { SchedulerConfig } from './scheduler-config';
/** @type {?} */
export var SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
/**
 * @param {?} config
 * @return {?}
 */
export function provideAuthConfig(config) {
    return new SchedulerConfig(config);
}
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalenderModule } from 'angular-calendar';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * \@NgModule({
 *   imports: [
 *     CalenderModule.forRoot(),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
var SchedulerModule = /** @class */ (function () {
    function SchedulerModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    SchedulerModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideAuthConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    };
    SchedulerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        CalendarModule.forRoot()
                    ],
                    declarations: [
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerCellComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent,
                        SchedulerEventTitlePipe
                    ],
                    providers: [
                        SchedulerEventTitlePipe,
                        SchedulerEventTitleFormatter,
                        SchedulerDateFormatter
                    ],
                    exports: [
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerCellComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent
                    ]
                },] },
    ];
    return SchedulerModule;
}());
export { SchedulerModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zY2hlZHVsZXIvc2NoZWR1bGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDekYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDN0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDeEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFFckcsK0NBQWMscUNBQXFDLENBQUM7QUFDcEQsdUNBQWMsZ0RBQWdELENBQUM7QUFDL0QsNkNBQWMsdURBQXVELENBQUM7QUFDdEUsd0NBQWMsb0NBQW9DLENBQUM7QUFDbkQsaUVBQWMsa0JBQWtCLENBQUM7QUFFakMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUVyRCxXQUFhLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Ozs7O0FBRXRFLE1BQU0sNEJBQTRCLE1BQXVCO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWtEUSx1QkFBTzs7OztJQUFkLFVBQWUsTUFBd0I7UUFDckMsTUFBTSxDQUFDO1lBQ0gsUUFBUSxFQUFFLGVBQWU7WUFDekIsU0FBUyxFQUFFO2dCQUNQLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQy9DLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRTthQUN4RjtTQUNKLENBQUM7S0FDTDs7Z0JBdkNBLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixjQUFjLENBQUMsT0FBTyxFQUFFO3FCQUN6QjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osOEJBQThCO3dCQUM5Qiw4QkFBOEI7d0JBQzlCLGdDQUFnQzt3QkFDaEMsK0JBQStCO3dCQUMvQixvQ0FBb0M7d0JBQ3BDLHNDQUFzQzt3QkFDdEMsc0NBQXNDO3dCQUN0Qyx1QkFBdUI7cUJBQ3hCO29CQUNELFNBQVMsRUFBRTt3QkFDVCx1QkFBdUI7d0JBQ3ZCLDRCQUE0Qjt3QkFDNUIsc0JBQXNCO3FCQUN2QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsOEJBQThCO3dCQUM5Qiw4QkFBOEI7d0JBQzlCLGdDQUFnQzt3QkFDaEMsK0JBQStCO3dCQUMvQixvQ0FBb0M7d0JBQ3BDLHNDQUFzQzt3QkFDdEMsc0NBQXNDO3FCQUN2QztpQkFDRjs7MEJBNUVEOztTQTZFYSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBDYWxlbmRhck1vZHVsZSB9IGZyb20gJ2FuZ3VsYXItY2FsZW5kYXInO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlclZpZXdDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci12aWV3LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyQ2VsbENvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWNlbGwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci1oZWFkZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRUaXRsZUNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LXRpdGxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtY29udGVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnMuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IFNjaGVkdWxlckV2ZW50VGl0bGVQaXBlIH0gZnJvbSAnLi9waXBlcy9zY2hlZHVsZXItZXZlbnQtdGl0bGUucGlwZSc7XHJcbmltcG9ydCB7IFNjaGVkdWxlckRhdGVGb3JtYXR0ZXIgfSBmcm9tICcuL2Zvcm1hdHRlcnMvc2NoZWR1bGVyLWRhdGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcclxuaW1wb3J0IHsgU2NoZWR1bGVyRXZlbnRUaXRsZUZvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVycy9zY2hlZHVsZXItZXZlbnQtdGl0bGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLXZpZXcuY29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXJzL3NjaGVkdWxlci1kYXRlLWZvcm1hdHRlci5wcm92aWRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0dGVycy9zY2hlZHVsZXItZXZlbnQtdGl0bGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9waXBlcy9zY2hlZHVsZXItZXZlbnQtdGl0bGUucGlwZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY2FsZW5kYXItdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgU2NoZWR1bGVyQ29uZmlnIH0gZnJvbSAnLi9zY2hlZHVsZXItY29uZmlnJztcclxuXHJcbmV4cG9ydCBjb25zdCBTQ0hFRFVMRVJfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuKCdTY2hlZHVsZXJDb25maWcnKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlQXV0aENvbmZpZyhjb25maWc6IFNjaGVkdWxlckNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBTY2hlZHVsZXJDb25maWcoY29uZmlnKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIG1vZHVsZSBvZiB0aGlzIGxpYnJhcnkuIEV4YW1wbGUgdXNhZ2U6XHJcbiAqXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgQ2FsZW5kZXJNb2R1bGUgfSBmcm9tICdhbmd1bGFyLWNhbGVuZGFyJztcclxuICogaW1wb3J0IHsgU2NoZWR1bGVyTW9kdWxlIH0gZnJvbSAnYW5ndWxhci1jYWxlbmRhci1zY2hlZHVsZXInO1xyXG4gKlxyXG4gKiBATmdNb2R1bGUoe1xyXG4gKiAgIGltcG9ydHM6IFtcclxuICogICAgIENhbGVuZGVyTW9kdWxlLmZvclJvb3QoKSxcclxuICogICAgIFNjaGVkdWxlck1vZHVsZS5mb3JSb290KHsgbG9jYWxlOiAnZW4nLCBoZWFkZXJEYXRlRm9ybWF0OiAnZGF5c1JhbmdlJyB9KVxyXG4gKiAgIF1cclxuICogfSlcclxuICogY2xhc3MgTXlNb2R1bGUge31cclxuICogYGBgXHJcbiAqXHJcbiAqL1xyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIENhbGVuZGFyTW9kdWxlLmZvclJvb3QoKVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlclZpZXdDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckNlbGxDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckhlYWRlckNvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50VGl0bGVDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29udGVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50LFxyXG4gICAgU2NoZWR1bGVyRXZlbnRUaXRsZVBpcGVcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgU2NoZWR1bGVyRXZlbnRUaXRsZVBpcGUsXHJcbiAgICBTY2hlZHVsZXJFdmVudFRpdGxlRm9ybWF0dGVyLFxyXG4gICAgU2NoZWR1bGVyRGF0ZUZvcm1hdHRlclxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJWaWV3Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJDZWxsQ29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJIZWFkZXJDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFRpdGxlQ29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbnRlbnRDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uc0NvbXBvbmVudFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFNjaGVkdWxlck1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogU2NoZWR1bGVyQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5nTW9kdWxlOiBTY2hlZHVsZXJNb2R1bGUsXHJcbiAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogU0NIRURVTEVSX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB9LFxyXG4gICAgICAgICAgICB7IHByb3ZpZGU6IFNjaGVkdWxlckNvbmZpZywgdXNlRmFjdG9yeTogcHJvdmlkZUF1dGhDb25maWcsIGRlcHM6IFtTQ0hFRFVMRVJfQ09ORklHXSB9XHJcbiAgICAgICAgXVxyXG4gICAgfTtcclxufVxyXG59XHJcbiJdfQ==