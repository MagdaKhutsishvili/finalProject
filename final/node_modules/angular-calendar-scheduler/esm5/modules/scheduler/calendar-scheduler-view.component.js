/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ChangeDetectorRef, LOCALE_ID, Inject, TemplateRef, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { startOfMinute, startOfDay, startOfWeek, endOfDay, endOfWeek, addMinutes, addHours, addDays, subSeconds, setMinutes, setHours, setDate, setMonth, setYear, isSameSecond, isSameDay, getDay } from 'date-fns';
import { SchedulerConfig } from './scheduler-config';
/** @type {?} */
var WEEKEND_DAY_NUMBERS = [0, 6];
/** @type {?} */
var DAYS_IN_WEEK = 7;
/** @type {?} */
var HOURS_IN_DAY = 24;
/** @type {?} */
var MINUTES_IN_HOUR = 60;
/** @type {?} */
var SECONDS_IN_DAY = 60 * 60 * 24;
/**
 * @record
 */
export function SchedulerView() { }
/** @type {?} */
SchedulerView.prototype.days;
/**
 * @record
 */
export function SchedulerViewDay() { }
/** @type {?} */
SchedulerViewDay.prototype.date;
/** @type {?} */
SchedulerViewDay.prototype.isPast;
/** @type {?} */
SchedulerViewDay.prototype.isToday;
/** @type {?} */
SchedulerViewDay.prototype.isFuture;
/** @type {?} */
SchedulerViewDay.prototype.isWeekend;
/** @type {?} */
SchedulerViewDay.prototype.inMonth;
/** @type {?} */
SchedulerViewDay.prototype.dragOver;
/** @type {?|undefined} */
SchedulerViewDay.prototype.backgroundColor;
/** @type {?|undefined} */
SchedulerViewDay.prototype.cssClass;
/** @type {?} */
SchedulerViewDay.prototype.hours;
/**
 * @record
 */
export function SchedulerViewHour() { }
/** @type {?} */
SchedulerViewHour.prototype.hour;
/** @type {?} */
SchedulerViewHour.prototype.date;
/** @type {?} */
SchedulerViewHour.prototype.segments;
/** @type {?} */
SchedulerViewHour.prototype.isPast;
/** @type {?} */
SchedulerViewHour.prototype.isFuture;
/** @type {?} */
SchedulerViewHour.prototype.hasBorder;
/** @type {?|undefined} */
SchedulerViewHour.prototype.backgroundColor;
/** @type {?|undefined} */
SchedulerViewHour.prototype.cssClass;
/**
 * @record
 */
export function SchedulerViewHourSegment() { }
/** @type {?} */
SchedulerViewHourSegment.prototype.segment;
/** @type {?} */
SchedulerViewHourSegment.prototype.date;
/** @type {?} */
SchedulerViewHourSegment.prototype.events;
/** @type {?} */
SchedulerViewHourSegment.prototype.isPast;
/** @type {?} */
SchedulerViewHourSegment.prototype.isFuture;
/** @type {?} */
SchedulerViewHourSegment.prototype.isDisabled;
/** @type {?} */
SchedulerViewHourSegment.prototype.hasBorder;
/** @type {?|undefined} */
SchedulerViewHourSegment.prototype.backgroundColor;
/** @type {?|undefined} */
SchedulerViewHourSegment.prototype.cssClass;
/**
 * @record
 */
export function CalendarSchedulerEvent() { }
/** @type {?} */
CalendarSchedulerEvent.prototype.id;
/** @type {?} */
CalendarSchedulerEvent.prototype.start;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.end;
/** @type {?} */
CalendarSchedulerEvent.prototype.title;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.content;
/** @type {?} */
CalendarSchedulerEvent.prototype.color;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.actions;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.status;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.cssClass;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.startsBeforeSegment;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.endsAfterSegment;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.isHovered;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.isDisabled;
/** @type {?|undefined} */
CalendarSchedulerEvent.prototype.isClickable;
/** @typedef {?} */
var CalendarSchedulerEventStatus;
export { CalendarSchedulerEventStatus };
/**
 * @record
 */
export function CalendarSchedulerEventAction() { }
/** @type {?|undefined} */
CalendarSchedulerEventAction.prototype.when;
/** @type {?} */
CalendarSchedulerEventAction.prototype.label;
/** @type {?} */
CalendarSchedulerEventAction.prototype.title;
/** @type {?|undefined} */
CalendarSchedulerEventAction.prototype.cssClass;
/** @type {?} */
CalendarSchedulerEventAction.prototype.onClick;
var CalendarSchedulerViewComponent = /** @class */ (function () {
    /**
     * @hidden
     */
    function CalendarSchedulerViewComponent(cdr, locale, config) {
        this.cdr = cdr;
        this.config = config;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * Specify if the first day of current scheduler view has to be today or the first day of the week
         */
        this.startsWithToday = false;
        /**
         * Specify if actions must be shown or not
         */
        this.showActions = true;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPlacement = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the segment is clicked
         */
        this.segmentClicked = new EventEmitter();
        /**
         * Called when the event is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        this.locale = config.locale || locale;
    }
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.ngOnInit = /**
     * @hidden
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.ngOnChanges = /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.hours = this.getSchedulerViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays || changes.dayStartHour || changes.dayEndHour || changes.dayStartMinute || changes.dayEndMinute) {
            this.refreshBody();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.ngOnDestroy = /**
     * @hidden
     * @return {?}
     */
    function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} event
     * @param {?} isHighlighted
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.toggleSegmentHighlight = /**
     * @hidden
     * @param {?} event
     * @param {?} isHighlighted
     * @return {?}
     */
    function (event, isHighlighted) {
        this.days.forEach(function (day) {
            day.hours.forEach(function (hour) {
                // hour.segments.forEach((segment: SchedulerViewHourSegment) => {
                //    if (isHighlighted && segment.events.indexOf(event) > -1) {
                //        segment.backgroundColor = event.color.secondary;
                //    } else {
                //        delete segment.backgroundColor;
                //    }
                // });
                hour.segments.filter(function (segment) { return segment.events.some(function (ev) { return ev.id === event.id && ev.start.getDay() === event.start.getDay(); }); })
                    .forEach(function (segment) {
                    segment.events.filter(function (ev) { return ev.id === event.id && ev.start.getDay() === event.start.getDay(); })
                        .forEach(function (e) {
                        if (isHighlighted) {
                            segment.backgroundColor = e.color.secondary;
                        }
                        else {
                            delete segment.backgroundColor;
                        }
                    });
                });
            });
        });
    };
    /**
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.refreshHeader = /**
     * @return {?}
     */
    function () {
        this.headerDays = this.getSchedulerViewDays({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            excluded: this.excludeDays
        });
    };
    /**
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.refreshBody = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.view = this.getSchedulerView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            excluded: this.excludeDays
        });
        if (this.dayModifier) {
            this.days.forEach(function (day) { return _this.dayModifier(day); });
        }
        if (this.dayModifier || this.hourModifier || this.segmentModifier) {
            this.view.days.forEach(function (day) {
                if (_this.dayModifier) {
                    _this.dayModifier(day);
                }
                day.hours.forEach(function (hour) {
                    if (_this.hourModifier) {
                        _this.hourModifier(hour);
                    }
                    hour.segments.forEach(function (segment) {
                        if (_this.segmentModifier) {
                            _this.segmentModifier(segment);
                        }
                    });
                });
            });
        }
    };
    /**
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.refreshAll = /**
     * @return {?}
     */
    function () {
        this.refreshHeader();
        this.refreshBody();
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.getSchedulerView = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var events = args.events || [];
        /** @type {?} */
        var viewDate = args.viewDate;
        /** @type {?} */
        var weekStartsOn = args.weekStartsOn;
        /** @type {?} */
        var startsWithToday = args.startsWithToday;
        /** @type {?} */
        var excluded = args.excluded || [];
        /** @type {?} */
        var precision = args.precision || 'days';
        if (!events) {
            events = [];
        }
        /** @type {?} */
        var startOfViewWeek = startsWithToday ? startOfDay(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        var endOfViewWeek = startsWithToday ? addDays(endOfDay(viewDate), 6) : endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        var eventsInWeek = this.getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek });
        this.days = this.getSchedulerViewDays({
            viewDate: viewDate,
            weekStartsOn: weekStartsOn,
            startsWithToday: startsWithToday,
            excluded: excluded
        });
        this.days.forEach(function (day, dayIndex) {
            /** @type {?} */
            var hours = [];
            _this.hours.forEach(function (hour, hourIndex) {
                /** @type {?} */
                var segments = [];
                hour.segments.forEach(function (segment, segmentIndex) {
                    segment.date = setDate(setMonth(setYear(segment.date, day.date.getFullYear()), day.date.getMonth()), day.date.getDate());
                    /** @type {?} */
                    var startOfSegment = segment.date;
                    /** @type {?} */
                    var endOfSegment = addMinutes(segment.date, MINUTES_IN_HOUR / _this.hourSegments);
                    /** @type {?} */
                    var evts = _this.getEventsInPeriod({
                        events: eventsInWeek,
                        periodStart: startOfSegment,
                        periodEnd: endOfSegment
                    }).map(function (event) { return ({
                        id: event.id,
                        start: event.start,
                        end: event.end,
                        title: event.title,
                        content: event.content,
                        color: event.color,
                        actions: event.actions,
                        status: event.status,
                        cssClass: event.cssClass,
                        startsBeforeSegment: event.start < startOfSegment,
                        endsAfterSegment: event.end > endOfSegment,
                        isHovered: false,
                        isDisabled: event.isDisabled || false,
                        isClickable: event.isClickable !== undefined && event.isClickable !== null ? event.isClickable : true
                    }); });
                    segments.push(/** @type {?} */ ({
                        segment: segment,
                        date: new Date(segment.date),
                        events: evts,
                        hasBorder: true
                    }));
                });
                /** @type {?} */
                var hourDate = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
                hours.push(/** @type {?} */ ({ hour: hour, date: hourDate, segments: segments, hasBorder: true }));
            });
            day.hours = hours;
        });
        return /** @type {?} */ ({
            days: this.days
        });
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.isEventInPeriod = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var event = args.event;
        /** @type {?} */
        var periodStart = args.periodStart;
        /** @type {?} */
        var periodEnd = args.periodEnd;
        /** @type {?} */
        var eventStart = event.start;
        /** @type {?} */
        var eventEnd = event.end || event.start;
        if (eventStart > periodStart && eventStart < periodEnd) {
            return true;
        }
        if (eventEnd > periodStart && eventEnd < periodEnd) {
            return true;
        }
        if (eventStart < periodStart && eventEnd > periodEnd) {
            return true;
        }
        if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, subSeconds(periodEnd, 1))) {
            return true;
        }
        if (isSameSecond(subSeconds(eventEnd, 1), periodStart) || isSameSecond(eventEnd, periodEnd)) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.getEventsInPeriod = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var events = args.events;
        /** @type {?} */
        var periodStart = args.periodStart;
        /** @type {?} */
        var periodEnd = args.periodEnd;
        return events.filter(function (event) { return _this.isEventInPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.getSchedulerViewDays = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var viewDate = args.viewDate;
        /** @type {?} */
        var weekStartsOn = args.weekStartsOn;
        /** @type {?} */
        var startsWithToday = args.startsWithToday;
        /** @type {?} */
        var excluded = args.excluded || [];
        /** @type {?} */
        var start = startsWithToday ? new Date(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        var days = [];
        /** @type {?} */
        var loop = function (i) {
            /** @type {?} */
            var date = addDays(start, i);
            if (!excluded.some(function (e) { return date.getDay() === e; })) {
                days.push(_this.getSchedulerDay({ date: date }));
            }
        };
        for (var i = 0; i < DAYS_IN_WEEK; i++) {
            loop(i);
        }
        return days;
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.getSchedulerDay = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var date = args.date;
        /** @type {?} */
        var today = startOfDay(new Date());
        return /** @type {?} */ ({
            date: date,
            isPast: date < today,
            isToday: isSameDay(date, today),
            isFuture: date > today,
            isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
            hours: []
        });
    };
    /**
     * @param {?} args
     * @return {?}
     */
    CalendarSchedulerViewComponent.prototype.getSchedulerViewHourGrid = /**
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var viewDate = args.viewDate;
        /** @type {?} */
        var hourSegments = args.hourSegments;
        /** @type {?} */
        var dayStart = args.dayStart;
        /** @type {?} */
        var dayEnd = args.dayEnd;
        /** @type {?} */
        var hours = [];
        /** @type {?} */
        var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
        /** @type {?} */
        var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        /** @type {?} */
        var segmentDuration = MINUTES_IN_HOUR / hourSegments;
        /** @type {?} */
        var startOfViewDay = startOfDay(viewDate);
        /** @type {?} */
        var range = function (start, end) { return Array.from({ length: ((end + 1) - start) }, function (v, k) { return k + start; }); };
        /** @type {?} */
        var hoursInView = range(dayStart.hour, dayEnd.hour);
        // for (var i = 0; i < HOURS_IN_DAY; i++) {
        hoursInView.forEach(function (hour, i) {
            /** @type {?} */
            var segments = [];
            for (var j = 0; j < hourSegments; j++) {
                /** @type {?} */
                var date = addMinutes(addHours(startOfViewDay, hour), j * segmentDuration);
                if (date >= startOfView && date < endOfView) {
                    segments.push({
                        date: date,
                        isStart: j === 0
                    });
                }
            }
            if (segments.length > 0) {
                hours.push(/** @type {?} */ ({ segments: segments }));
            }
        });
        return hours;
    };
    CalendarSchedulerViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'calendar-scheduler-view',
                    template: "\n        <div class=\"cal-scheduler-view\" #weekViewContainer>\n            <calendar-scheduler-header\n                [days]=\"headerDays\"\n                [locale]=\"locale\"\n                [customTemplate]=\"headerTemplate\"\n                (dayClicked)=\"dayClicked.emit($event)\">\n            </calendar-scheduler-header>\n\n            <div class=\"cal-scheduler\">\n                <div class=\"cal-scheduler-hour-rows aside\">\n                    <div class=\"cal-scheduler-hour align-center horizontal\" *ngFor=\"let hour of hours\">\n                      <div class=\"cal-scheduler-time\">\n                        <div class=\"cal-scheduler-hour-segment\" *ngFor=\"let segment of hour.segments\">\n                            {{ segment.date | calendarDate:'dayViewHour':locale }}\n                        </div>\n                      </div>\n                    </div>\n                </div>\n\n                <div class=\"cal-scheduler-cols aside\">\n                    <div class=\"cal-scheduler-col\" *ngFor=\"let day of view.days\">\n                        <calendar-scheduler-cell\n                            *ngFor=\"let hour of day.hours\"\n                            [ngClass]=\"day?.cssClass\"\n                            [day]=\"day\"\n                            [hour]=\"hour\"\n                            [locale]=\"locale\"\n                            [tooltipPlacement]=\"tooltipPlacement\"\n                            [showActions]=\"showActions\"\n                            [customTemplate]=\"cellTemplate\"\n                            [eventTemplate]=\"eventTemplate\"\n                            (click)=\"dayClicked.emit({date: day})\"\n                            (highlightSegment)=\"toggleSegmentHighlight($event.event, true)\"\n                            (unhighlightSegment)=\"toggleSegmentHighlight($event.event, false)\"\n                            (segmentClicked)=\"segmentClicked.emit({segment: $event.segment})\"\n                            (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n                        </calendar-scheduler-cell>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                    styles: [".cal-scheduler-view .cal-scheduler-headers{display:flex;flex-flow:row wrap;margin-bottom:3px;border:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .aside{flex:1 0}.cal-scheduler-view .cal-scheduler-headers .aside.cal-header-clock{max-width:5em}.cal-scheduler-view .cal-scheduler-headers .cal-header{flex:1;text-align:center;padding:5px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cal-scheduler-view .cal-scheduler-headers .cal-header:not(:last-child){border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .cal-header:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-weekend span{color:#8b0000}.cal-scheduler-view .cal-scheduler-headers .cal-header span{font-weight:400;opacity:.5}.cal-scheduler-view .cal-scheduler,.cal-scheduler-view .cal-scheduler-headers .cal-header-cols{display:flex;flex-flow:row wrap}.cal-scheduler-view .cal-scheduler .aside{flex:1 0}.cal-scheduler-view .cal-scheduler .aside.cal-scheduler-hour-rows{max-width:5em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows{width:auto!important;border:1px solid #e1e1e1;overflow:hidden;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour{display:flex;height:7.25em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:nth-child(odd){background-color:#fafafa}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:not(:last-child){border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time{display:flex;flex-flow:column wrap;width:100%;font-weight:700;text-align:center}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment{flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols{display:flex;flex-flow:row wrap;border-top:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col{display:flex;flex-flow:column wrap;flex:1 0;border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell{display:flex;flex-flow:column wrap;flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled .cal-scheduler-events{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments{display:flex;flex-flow:column wrap;flex:1 0;border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled .cal-scheduler-event{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(.has-events):hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event{flex:1 0;display:flex;flex-flow:row wrap;padding:0 10px;font-size:12px;margin:0 2px;line-height:30px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;transition:all ease-out .2s;filter:brightness(100%);-webkit-filter:brightness(100%);-webkit-backface-visibility:hidden}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-starts-within-segment{border-top-left-radius:.3em;border-top-right-radius:.3em;margin-top:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-ends-within-segment{border-bottom-left-radius:.3em;border-bottom-right-radius:.3em;margin-bottom:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-disabled{background-color:gray!important;filter:grayscale(100%);-webkit-filter:grayscale(100%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-not-clickable{cursor:not-allowed!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled).hovered,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled):hover{cursor:pointer;filter:brightness(80%);-webkit-filter:brightness(80%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container{position:relative;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-title{font-size:16px;font-weight:700}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status{position:absolute;top:25%;right:1%;width:16px;height:16px;background:grey;border-radius:50px;border:1px solid #000}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.ok{background:green}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.warning{background:orange}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.danger{background:red}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-content-container{width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container{flex:1 0;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions{position:absolute;bottom:5px;right:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions .cal-scheduler-event-action{text-decoration:none}"],
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    CalendarSchedulerViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: SchedulerConfig }
    ]; };
    CalendarSchedulerViewComponent.propDecorators = {
        viewDate: [{ type: Input }],
        events: [{ type: Input }],
        hourSegments: [{ type: Input }],
        excludeDays: [{ type: Input }],
        startsWithToday: [{ type: Input }],
        showActions: [{ type: Input }],
        dayModifier: [{ type: Input }],
        hourModifier: [{ type: Input }],
        segmentModifier: [{ type: Input }],
        refresh: [{ type: Input }],
        locale: [{ type: Input }],
        tooltipPlacement: [{ type: Input }],
        weekStartsOn: [{ type: Input }],
        headerTemplate: [{ type: Input }],
        cellTemplate: [{ type: Input }],
        eventTemplate: [{ type: Input }],
        precision: [{ type: Input }],
        dayStartHour: [{ type: Input }],
        dayStartMinute: [{ type: Input }],
        dayEndHour: [{ type: Input }],
        dayEndMinute: [{ type: Input }],
        dayClicked: [{ type: Output }],
        segmentClicked: [{ type: Output }],
        eventClicked: [{ type: Output }]
    };
    return CalendarSchedulerViewComponent;
}());
export { CalendarSchedulerViewComponent };
if (false) {
    /**
     * The current view date
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.viewDate;
    /**
     * An array of events to display on view
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.events;
    /**
     * The number of segments in an hour. Must be <= 6
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.hourSegments;
    /**
     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.excludeDays;
    /**
     * Specify if the first day of current scheduler view has to be today or the first day of the week
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.startsWithToday;
    /**
     * Specify if actions must be shown or not
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.showActions;
    /**
     * A function that will be called before each cell is rendered. The first argument will contain the calendar (day, hour or segment) cell.
     * If you add the `cssClass` property to the cell it will add that class to the cell in the template
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayModifier;
    /** @type {?} */
    CalendarSchedulerViewComponent.prototype.hourModifier;
    /** @type {?} */
    CalendarSchedulerViewComponent.prototype.segmentModifier;
    /**
     * An observable that when emitted on will re-render the current view
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.refresh;
    /**
     * The locale used to format dates
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.locale;
    /**
     * The placement of the event tooltip
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.tooltipPlacement;
    /**
     * The start number of the week
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.weekStartsOn;
    /**
     * A custom template to use to replace the header
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.headerTemplate;
    /**
     * A custom template to use to replace the day cell
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.cellTemplate;
    /**
     * A custom template to use for week view events
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.eventTemplate;
    /**
     * The precision to display events.
     * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.precision;
    /**
     * The day start hours in 24 hour time. Must be 0-23
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayStartHour;
    /**
     * The day start minutes. Must be 0-59
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayStartMinute;
    /**
     * The day end hours in 24 hour time. Must be 0-23
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayEndHour;
    /**
     * The day end minutes. Must be 0-59
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayEndMinute;
    /**
     * Called when a header week day is clicked
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.dayClicked;
    /**
     * Called when the segment is clicked
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.segmentClicked;
    /**
     * Called when the event is clicked
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.eventClicked;
    /**
     * @hidden
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.days;
    /**
     * @hidden
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.headerDays;
    /**
     * @hidden
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.view;
    /**
     * @hidden
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.refreshSubscription;
    /**
     * @hidden
     * @type {?}
     */
    CalendarSchedulerViewComponent.prototype.hours;
    /** @type {?} */
    CalendarSchedulerViewComponent.prototype.cdr;
    /** @type {?} */
    CalendarSchedulerViewComponent.prototype.config;
}
/**
 * @record
 */
export function GetSchedulerViewArgs() { }
/** @type {?|undefined} */
GetSchedulerViewArgs.prototype.events;
/** @type {?} */
GetSchedulerViewArgs.prototype.viewDate;
/** @type {?} */
GetSchedulerViewArgs.prototype.weekStartsOn;
/** @type {?} */
GetSchedulerViewArgs.prototype.startsWithToday;
/** @type {?|undefined} */
GetSchedulerViewArgs.prototype.excluded;
/** @type {?|undefined} */
GetSchedulerViewArgs.prototype.precision;
/**
 * @record
 */
export function GetSchedulerViewHourGridArgs() { }
/** @type {?} */
GetSchedulerViewHourGridArgs.prototype.viewDate;
/** @type {?} */
GetSchedulerViewHourGridArgs.prototype.hourSegments;
/** @type {?} */
GetSchedulerViewHourGridArgs.prototype.dayStart;
/** @type {?} */
GetSchedulerViewHourGridArgs.prototype.dayEnd;

//# sourceMappingURL=data:application/json;base64,