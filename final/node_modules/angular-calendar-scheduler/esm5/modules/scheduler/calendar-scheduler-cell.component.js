/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
import * as momentImported from 'moment';
/** @type {?} */
var moment = momentImported;
var CalendarSchedulerCellComponent = /** @class */ (function () {
    function CalendarSchedulerCellComponent() {
        this.showActions = true;
        this.highlightSegment = new EventEmitter();
        this.unhighlightSegment = new EventEmitter();
        this.segmentClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CalendarSchedulerCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.title = moment(this.day.date).format('dddd L');
    };
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    CalendarSchedulerCellComponent.prototype.onMouseEnter = /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    function (mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.highlightSegment.emit({ event: event });
        }
    };
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    CalendarSchedulerCellComponent.prototype.onMouseLeave = /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    function (mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.unhighlightSegment.emit({ event: event });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} segment
     * @return {?}
     */
    CalendarSchedulerCellComponent.prototype.onSegmentClick = /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} segment
     * @return {?}
     */
    function (mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0) {
            this.segmentClicked.emit({ segment: segment });
        }
    };
    /**
     * @hidden
     */
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} event
     * @return {?}
     */
    CalendarSchedulerCellComponent.prototype.onEventClick = /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} event
     * @return {?}
     */
    function (mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    };
    CalendarSchedulerCellComponent.decorators = [
        { type: Component, args: [{
                    // [class.no-border]': '!day.hasBorder
                    selector: 'calendar-scheduler-cell',
                    template: "\n        <ng-template #defaultTemplate>\n            <div class=\"cal-scheduler-segments\" *ngIf=\"hour.segments.length > 0\"\n                [ngClass]=\"hour?.cssClass\"\n                [class.no-border]=\"!hour.hasBorder\">\n                <div class=\"cal-scheduler-segment\"\n                    *ngFor=\"let segment of hour.segments; let si = index\"\n                    [title]=\"title\"\n                    [ngClass]=\"segment?.cssClass\"\n                    [class.has-events]=\"segment.events.length > 0\"\n                    [class.cal-disabled]=\"segment.isDisabled\"\n                    [style.backgroundColor]=\"segment.backgroundColor\"\n                    [class.no-border]=\"!segment.hasBorder\"\n                    (mwlClick)=\"onSegmentClick($event, segment)\">\n\n                    <div class=\"cal-scheduler-events\" *ngIf=\"segment.events.length > 0\">\n                        <calendar-scheduler-event\n                            *ngFor=\"let event of segment.events\"\n                            [day]=\"day\"\n                            [hour]=\"hour\"\n                            [segment]=\"segment\"\n                            [event]=\"event\"\n                            (mouseenter)=\"onMouseEnter($event, segment, event)\"\n                            (mouseleave)=\"onMouseLeave($event, segment, event)\"\n                            [tooltipPlacement]=\"tooltipPlacement\"\n                            [showActions]=\"showActions\"\n                            [customTemplate]=\"eventTemplate\"\n                            (eventClicked)=\"onEventClick($event, event)\">\n                        </calendar-scheduler-event>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n                day: day,\n                hour: hour,\n                locale: locale,\n                tooltipPlacement: tooltipPlacement,\n                showActions: showActions,\n                eventTemplate: eventTemplate,\n                highlightSegment: highlightSegment,\n                unhighlightSegment: unhighlightSegment,\n                segmentClicked: segmentClicked,\n                eventClicked: eventClicked\n            }\">\n        </ng-template>\n    ",
                    host: {
                        'class': 'cal-scheduler-cell',
                        '[class.cal-past]': 'day.isPast',
                        '[class.cal-today]': 'day.isToday',
                        '[class.cal-future]': 'day.isFuture',
                        '[class.cal-weekend]': 'day.isWeekend',
                        '[class.cal-in-month]': 'day.inMonth',
                        '[class.cal-out-month]': '!day.inMonth',
                        '[style.backgroundColor]': 'day.backgroundColor'
                    }
                },] },
    ];
    CalendarSchedulerCellComponent.propDecorators = {
        title: [{ type: Input }],
        day: [{ type: Input }],
        hour: [{ type: Input }],
        locale: [{ type: Input }],
        tooltipPlacement: [{ type: Input }],
        showActions: [{ type: Input }],
        customTemplate: [{ type: Input }],
        eventTemplate: [{ type: Input }],
        highlightSegment: [{ type: Output }],
        unhighlightSegment: [{ type: Output }],
        segmentClicked: [{ type: Output }],
        eventClicked: [{ type: Output }]
    };
    return CalendarSchedulerCellComponent;
}());
export { CalendarSchedulerCellComponent };
if (false) {
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.title;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.day;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.hour;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.locale;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.tooltipPlacement;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.showActions;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.customTemplate;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.eventTemplate;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.highlightSegment;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.unhighlightSegment;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.segmentClicked;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.eventClicked;
}

//# sourceMappingURL=data:application/json;base64,