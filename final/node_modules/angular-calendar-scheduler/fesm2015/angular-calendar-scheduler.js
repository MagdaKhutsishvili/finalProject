import { Injectable, Component, Input, Output, EventEmitter, ChangeDetectorRef, LOCALE_ID, Inject, ViewEncapsulation, Renderer2, Pipe, NgModule, InjectionToken } from '@angular/core';
import 'rxjs';
import { startOfMinute, startOfDay, startOfWeek, endOfDay, endOfWeek, addMinutes, addHours, addDays, subSeconds, setMinutes, setHours, setDate, setMonth, setYear, isSameSecond, isSameDay, getDay, startOfMonth, endOfMonth, addWeeks, addMonths, subDays, subWeeks, subMonths } from 'date-fns';
import * as momentImported from 'moment';
import { CalendarEventTitleFormatter, CalendarDateFormatter, CalendarModule } from 'angular-calendar';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Auth configuration.
 */
class SchedulerConfig {
    /**
     * @param {?=} config
     */
    constructor(config = {}) {
        this.locale = 'en';
        this.headerDateFormat = 'daysRange';
        /**
         * @template T
         * @param {?} source
         * @param {?} defaultValue
         * @return {?}
         */
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.locale = use(config.locale, this.locale);
        this.headerDateFormat = use(config.headerDateFormat, this.headerDateFormat);
    }
}
SchedulerConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SchedulerConfig.ctorParameters = () => [
    { type: SchedulerConfig }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const WEEKEND_DAY_NUMBERS = [0, 6];
/** @type {?} */
const DAYS_IN_WEEK = 7;
/** @type {?} */
const MINUTES_IN_HOUR = 60;
class CalendarSchedulerViewComponent {
    /**
     * @hidden
     * @param {?} cdr
     * @param {?} locale
     * @param {?} config
     */
    constructor(cdr, locale, config) {
        this.cdr = cdr;
        this.config = config;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * Specify if the first day of current scheduler view has to be today or the first day of the week
         */
        this.startsWithToday = false;
        /**
         * Specify if actions must be shown or not
         */
        this.showActions = true;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPlacement = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the segment is clicked
         */
        this.segmentClicked = new EventEmitter();
        /**
         * Called when the event is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        this.locale = config.locale || locale;
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.markForCheck();
            });
        }
    }
    /**
     * @hidden
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.hours = this.getSchedulerViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute
            }
        });
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays || changes.dayStartHour || changes.dayEndHour || changes.dayStartMinute || changes.dayEndMinute) {
            this.refreshBody();
        }
    }
    /**
     * @hidden
     * @return {?}
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     * @param {?} event
     * @param {?} isHighlighted
     * @return {?}
     */
    toggleSegmentHighlight(event, isHighlighted) {
        this.days.forEach((day) => {
            day.hours.forEach((hour) => {
                // hour.segments.forEach((segment: SchedulerViewHourSegment) => {
                //    if (isHighlighted && segment.events.indexOf(event) > -1) {
                //        segment.backgroundColor = event.color.secondary;
                //    } else {
                //        delete segment.backgroundColor;
                //    }
                // });
                hour.segments.filter((segment) => segment.events.some((ev) => ev.id === event.id && ev.start.getDay() === event.start.getDay()))
                    .forEach((segment) => {
                    segment.events.filter((ev) => ev.id === event.id && ev.start.getDay() === event.start.getDay())
                        .forEach((e) => {
                        if (isHighlighted) {
                            segment.backgroundColor = e.color.secondary;
                        }
                        else {
                            delete segment.backgroundColor;
                        }
                    });
                });
            });
        });
    }
    /**
     * @return {?}
     */
    refreshHeader() {
        this.headerDays = this.getSchedulerViewDays({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            excluded: this.excludeDays
        });
    }
    /**
     * @return {?}
     */
    refreshBody() {
        this.view = this.getSchedulerView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            startsWithToday: this.startsWithToday,
            excluded: this.excludeDays
        });
        if (this.dayModifier) {
            this.days.forEach(day => this.dayModifier(day));
        }
        if (this.dayModifier || this.hourModifier || this.segmentModifier) {
            this.view.days.forEach(day => {
                if (this.dayModifier) {
                    this.dayModifier(day);
                }
                day.hours.forEach((hour) => {
                    if (this.hourModifier) {
                        this.hourModifier(hour);
                    }
                    hour.segments.forEach((segment) => {
                        if (this.segmentModifier) {
                            this.segmentModifier(segment);
                        }
                    });
                });
            });
        }
    }
    /**
     * @return {?}
     */
    refreshAll() {
        this.refreshHeader();
        this.refreshBody();
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getSchedulerView(args) {
        /** @type {?} */
        let events = args.events || [];
        /** @type {?} */
        const viewDate = args.viewDate;
        /** @type {?} */
        const weekStartsOn = args.weekStartsOn;
        /** @type {?} */
        const startsWithToday = args.startsWithToday;
        /** @type {?} */
        const excluded = args.excluded || [];
        /** @type {?} */
        const precision = args.precision || 'days';
        if (!events) {
            events = [];
        }
        /** @type {?} */
        const startOfViewWeek = startsWithToday ? startOfDay(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        const endOfViewWeek = startsWithToday ? addDays(endOfDay(viewDate), 6) : endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        const eventsInWeek = this.getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek });
        this.days = this.getSchedulerViewDays({
            viewDate: viewDate,
            weekStartsOn: weekStartsOn,
            startsWithToday: startsWithToday,
            excluded: excluded
        });
        this.days.forEach((day, dayIndex) => {
            /** @type {?} */
            const hours = [];
            this.hours.forEach((hour, hourIndex) => {
                /** @type {?} */
                const segments = [];
                hour.segments.forEach((segment, segmentIndex) => {
                    segment.date = setDate(setMonth(setYear(segment.date, day.date.getFullYear()), day.date.getMonth()), day.date.getDate());
                    /** @type {?} */
                    const startOfSegment = segment.date;
                    /** @type {?} */
                    const endOfSegment = addMinutes(segment.date, MINUTES_IN_HOUR / this.hourSegments);
                    /** @type {?} */
                    const evts = this.getEventsInPeriod({
                        events: eventsInWeek,
                        periodStart: startOfSegment,
                        periodEnd: endOfSegment
                    }).map((event) => /** @type {?} */ ({
                        id: event.id,
                        start: event.start,
                        end: event.end,
                        title: event.title,
                        content: event.content,
                        color: event.color,
                        actions: event.actions,
                        status: event.status,
                        cssClass: event.cssClass,
                        startsBeforeSegment: event.start < startOfSegment,
                        endsAfterSegment: event.end > endOfSegment,
                        isHovered: false,
                        isDisabled: event.isDisabled || false,
                        isClickable: event.isClickable !== undefined && event.isClickable !== null ? event.isClickable : true
                    }));
                    segments.push(/** @type {?} */ ({
                        segment: segment,
                        date: new Date(segment.date),
                        events: evts,
                        hasBorder: true
                    }));
                });
                /** @type {?} */
                const hourDate = new Date(day.date.getFullYear(), day.date.getMonth(), day.date.getDate(), hour.segments[0].date.getHours());
                hours.push(/** @type {?} */ ({ hour: hour, date: hourDate, segments: segments, hasBorder: true }));
            });
            day.hours = hours;
        });
        return /** @type {?} */ ({
            days: this.days
        });
    }
    /**
     * @param {?} args
     * @return {?}
     */
    isEventInPeriod(args) {
        /** @type {?} */
        const event = args.event;
        /** @type {?} */
        const periodStart = args.periodStart;
        /** @type {?} */
        const periodEnd = args.periodEnd;
        /** @type {?} */
        const eventStart = event.start;
        /** @type {?} */
        const eventEnd = event.end || event.start;
        if (eventStart > periodStart && eventStart < periodEnd) {
            return true;
        }
        if (eventEnd > periodStart && eventEnd < periodEnd) {
            return true;
        }
        if (eventStart < periodStart && eventEnd > periodEnd) {
            return true;
        }
        if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, subSeconds(periodEnd, 1))) {
            return true;
        }
        if (isSameSecond(subSeconds(eventEnd, 1), periodStart) || isSameSecond(eventEnd, periodEnd)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getEventsInPeriod(args) {
        /** @type {?} */
        const events = args.events;
        /** @type {?} */
        const periodStart = args.periodStart;
        /** @type {?} */
        const periodEnd = args.periodEnd;
        return events.filter((event) => this.isEventInPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }));
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getSchedulerViewDays(args) {
        /** @type {?} */
        const viewDate = args.viewDate;
        /** @type {?} */
        const weekStartsOn = args.weekStartsOn;
        /** @type {?} */
        const startsWithToday = args.startsWithToday;
        /** @type {?} */
        const excluded = args.excluded || [];
        /** @type {?} */
        const start = startsWithToday ? new Date(viewDate) : startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        /** @type {?} */
        const days = [];
        /** @type {?} */
        const loop = (i) => {
            /** @type {?} */
            const date = addDays(start, i);
            if (!excluded.some((e) => date.getDay() === e)) {
                days.push(this.getSchedulerDay({ date: date }));
            }
        };
        for (let i = 0; i < DAYS_IN_WEEK; i++) {
            loop(i);
        }
        return days;
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getSchedulerDay(args) {
        /** @type {?} */
        const date = args.date;
        /** @type {?} */
        const today = startOfDay(new Date());
        return /** @type {?} */ ({
            date: date,
            isPast: date < today,
            isToday: isSameDay(date, today),
            isFuture: date > today,
            isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
            hours: []
        });
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getSchedulerViewHourGrid(args) {
        /** @type {?} */
        const viewDate = args.viewDate;
        /** @type {?} */
        const hourSegments = args.hourSegments;
        /** @type {?} */
        const dayStart = args.dayStart;
        /** @type {?} */
        const dayEnd = args.dayEnd;
        /** @type {?} */
        const hours = [];
        /** @type {?} */
        const startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
        /** @type {?} */
        const endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        /** @type {?} */
        const segmentDuration = MINUTES_IN_HOUR / hourSegments;
        /** @type {?} */
        const startOfViewDay = startOfDay(viewDate);
        /** @type {?} */
        const range = (start, end) => Array.from({ length: ((end + 1) - start) }, (v, k) => k + start);
        /** @type {?} */
        const hoursInView = range(dayStart.hour, dayEnd.hour);
        // for (var i = 0; i < HOURS_IN_DAY; i++) {
        hoursInView.forEach((hour, i) => {
            /** @type {?} */
            const segments = [];
            for (let j = 0; j < hourSegments; j++) {
                /** @type {?} */
                const date = addMinutes(addHours(startOfViewDay, hour), j * segmentDuration);
                if (date >= startOfView && date < endOfView) {
                    segments.push({
                        date: date,
                        isStart: j === 0
                    });
                }
            }
            if (segments.length > 0) {
                hours.push(/** @type {?} */ ({ segments: segments }));
            }
        });
        return hours;
    }
}
CalendarSchedulerViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-view',
                template: `
        <div class="cal-scheduler-view" #weekViewContainer>
            <calendar-scheduler-header
                [days]="headerDays"
                [locale]="locale"
                [customTemplate]="headerTemplate"
                (dayClicked)="dayClicked.emit($event)">
            </calendar-scheduler-header>

            <div class="cal-scheduler">
                <div class="cal-scheduler-hour-rows aside">
                    <div class="cal-scheduler-hour align-center horizontal" *ngFor="let hour of hours">
                      <div class="cal-scheduler-time">
                        <div class="cal-scheduler-hour-segment" *ngFor="let segment of hour.segments">
                            {{ segment.date | calendarDate:'dayViewHour':locale }}
                        </div>
                      </div>
                    </div>
                </div>

                <div class="cal-scheduler-cols aside">
                    <div class="cal-scheduler-col" *ngFor="let day of view.days">
                        <calendar-scheduler-cell
                            *ngFor="let hour of day.hours"
                            [ngClass]="day?.cssClass"
                            [day]="day"
                            [hour]="hour"
                            [locale]="locale"
                            [tooltipPlacement]="tooltipPlacement"
                            [showActions]="showActions"
                            [customTemplate]="cellTemplate"
                            [eventTemplate]="eventTemplate"
                            (click)="dayClicked.emit({date: day})"
                            (highlightSegment)="toggleSegmentHighlight($event.event, true)"
                            (unhighlightSegment)="toggleSegmentHighlight($event.event, false)"
                            (segmentClicked)="segmentClicked.emit({segment: $event.segment})"
                            (eventClicked)="eventClicked.emit({event: $event.event})">
                        </calendar-scheduler-cell>
                    </div>
                </div>
            </div>
        </div>
    `,
                styles: [`.cal-scheduler-view .cal-scheduler-headers{display:flex;flex-flow:row wrap;margin-bottom:3px;border:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .aside{flex:1 0}.cal-scheduler-view .cal-scheduler-headers .aside.cal-header-clock{max-width:5em}.cal-scheduler-view .cal-scheduler-headers .cal-header{flex:1;text-align:center;padding:5px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.cal-scheduler-view .cal-scheduler-headers .cal-header:not(:last-child){border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler-headers .cal-header:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler-headers .cal-header.cal-weekend span{color:#8b0000}.cal-scheduler-view .cal-scheduler-headers .cal-header span{font-weight:400;opacity:.5}.cal-scheduler-view .cal-scheduler,.cal-scheduler-view .cal-scheduler-headers .cal-header-cols{display:flex;flex-flow:row wrap}.cal-scheduler-view .cal-scheduler .aside{flex:1 0}.cal-scheduler-view .cal-scheduler .aside.cal-scheduler-hour-rows{max-width:5em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows{width:auto!important;border:1px solid #e1e1e1;overflow:hidden;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour{display:flex;height:7.25em}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:nth-child(odd){background-color:#fafafa}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour:not(:last-child){border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time{display:flex;flex-flow:column wrap;width:100%;font-weight:700;text-align:center}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment{flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-hour-rows .cal-scheduler-hour .cal-scheduler-time .cal-scheduler-hour-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols{display:flex;flex-flow:row wrap;border-top:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col{display:flex;flex-flow:column wrap;flex:1 0;border-right:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell{display:flex;flex-flow:column wrap;flex:1 0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-today{background-color:#e8fde7}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell.cal-disabled .cal-scheduler-events{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments{display:flex;flex-flow:column wrap;flex:1 0;border-bottom:1px solid #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments.cal-disabled .cal-scheduler-event{filter:opacity(50%);-webkit-filter:opacity(50%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(.has-events):hover{background-color:#ededed}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment:not(:last-child){border-bottom:thin dashed #e1e1e1}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.no-border{border-bottom:0!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment.cal-disabled{background-color:#eee;pointer-events:none}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container{flex:1 0;display:flex;flex-flow:column wrap}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event{flex:1 0;display:flex;flex-flow:row wrap;padding:0 10px;font-size:12px;margin:0 2px;line-height:30px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;transition:all ease-out .2s;filter:brightness(100%);-webkit-filter:brightness(100%);-webkit-backface-visibility:hidden}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-starts-within-segment{border-top-left-radius:.3em;border-top-right-radius:.3em;margin-top:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-ends-within-segment{border-bottom-left-radius:.3em;border-bottom-right-radius:.3em;margin-bottom:2px}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-disabled{background-color:gray!important;filter:grayscale(100%);-webkit-filter:grayscale(100%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event.cal-not-clickable{cursor:not-allowed!important}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled).hovered,.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event:not(.cal-disabled):hover{cursor:pointer;filter:brightness(80%);-webkit-filter:brightness(80%)}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container{position:relative;width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-title{font-size:16px;font-weight:700}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status{position:absolute;top:25%;right:1%;width:16px;height:16px;background:grey;border-radius:50px;border:1px solid #000}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.ok{background:green}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.warning{background:orange}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-title-container .cal-scheduler-event-status.danger{background:red}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-content-container{width:100%}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container{flex:1 0;position:relative}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions{position:absolute;bottom:5px;right:0}.cal-scheduler-view .cal-scheduler .cal-scheduler-cols .cal-scheduler-col .cal-scheduler-cell .cal-scheduler-segments .cal-scheduler-segment .cal-scheduler-events .cal-scheduler-event-container .cal-scheduler-event .cal-scheduler-event-actions-container .cal-scheduler-event-actions .cal-scheduler-event-action{text-decoration:none}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
CalendarSchedulerViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: SchedulerConfig }
];
CalendarSchedulerViewComponent.propDecorators = {
    viewDate: [{ type: Input }],
    events: [{ type: Input }],
    hourSegments: [{ type: Input }],
    excludeDays: [{ type: Input }],
    startsWithToday: [{ type: Input }],
    showActions: [{ type: Input }],
    dayModifier: [{ type: Input }],
    hourModifier: [{ type: Input }],
    segmentModifier: [{ type: Input }],
    refresh: [{ type: Input }],
    locale: [{ type: Input }],
    tooltipPlacement: [{ type: Input }],
    weekStartsOn: [{ type: Input }],
    headerTemplate: [{ type: Input }],
    cellTemplate: [{ type: Input }],
    eventTemplate: [{ type: Input }],
    precision: [{ type: Input }],
    dayStartHour: [{ type: Input }],
    dayStartMinute: [{ type: Input }],
    dayEndHour: [{ type: Input }],
    dayEndMinute: [{ type: Input }],
    dayClicked: [{ type: Output }],
    segmentClicked: [{ type: Output }],
    eventClicked: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const moment = momentImported;
class CalendarSchedulerCellComponent {
    constructor() {
        this.showActions = true;
        this.highlightSegment = new EventEmitter();
        this.unhighlightSegment = new EventEmitter();
        this.segmentClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.title = moment(this.day.date).format('dddd L');
    }
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.highlightSegment.emit({ event: event });
        }
    }
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.unhighlightSegment.emit({ event: event });
        }
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} segment
     * @return {?}
     */
    onSegmentClick(mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0) {
            this.segmentClicked.emit({ segment: segment });
        }
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} event
     * @return {?}
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
}
CalendarSchedulerCellComponent.decorators = [
    { type: Component, args: [{
                // [class.no-border]': '!day.hasBorder
                selector: 'calendar-scheduler-cell',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-segments" *ngIf="hour.segments.length > 0"
                [ngClass]="hour?.cssClass"
                [class.no-border]="!hour.hasBorder">
                <div class="cal-scheduler-segment"
                    *ngFor="let segment of hour.segments; let si = index"
                    [title]="title"
                    [ngClass]="segment?.cssClass"
                    [class.has-events]="segment.events.length > 0"
                    [class.cal-disabled]="segment.isDisabled"
                    [style.backgroundColor]="segment.backgroundColor"
                    [class.no-border]="!segment.hasBorder"
                    (mwlClick)="onSegmentClick($event, segment)">

                    <div class="cal-scheduler-events" *ngIf="segment.events.length > 0">
                        <calendar-scheduler-event
                            *ngFor="let event of segment.events"
                            [day]="day"
                            [hour]="hour"
                            [segment]="segment"
                            [event]="event"
                            (mouseenter)="onMouseEnter($event, segment, event)"
                            (mouseleave)="onMouseLeave($event, segment, event)"
                            [tooltipPlacement]="tooltipPlacement"
                            [showActions]="showActions"
                            [customTemplate]="eventTemplate"
                            (eventClicked)="onEventClick($event, event)">
                        </calendar-scheduler-event>
                    </div>
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                day: day,
                hour: hour,
                locale: locale,
                tooltipPlacement: tooltipPlacement,
                showActions: showActions,
                eventTemplate: eventTemplate,
                highlightSegment: highlightSegment,
                unhighlightSegment: unhighlightSegment,
                segmentClicked: segmentClicked,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    'class': 'cal-scheduler-cell',
                    '[class.cal-past]': 'day.isPast',
                    '[class.cal-today]': 'day.isToday',
                    '[class.cal-future]': 'day.isFuture',
                    '[class.cal-weekend]': 'day.isWeekend',
                    '[class.cal-in-month]': 'day.inMonth',
                    '[class.cal-out-month]': '!day.inMonth',
                    '[style.backgroundColor]': 'day.backgroundColor'
                }
            },] },
];
CalendarSchedulerCellComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    hour: [{ type: Input }],
    locale: [{ type: Input }],
    tooltipPlacement: [{ type: Input }],
    showActions: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventTemplate: [{ type: Input }],
    highlightSegment: [{ type: Output }],
    unhighlightSegment: [{ type: Output }],
    segmentClicked: [{ type: Output }],
    eventClicked: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CalendarSchedulerHeaderComponent {
    constructor() {
        this.dayClicked = new EventEmitter();
    }
}
CalendarSchedulerHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-header',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-headers">
                <div class="cal-header aside cal-header-clock align-center">
                    <i class="material-icons md-32" style="margin:auto;">schedule</i>
                </div>

                <div class="cal-header-cols aside">
                    <div
                        class="cal-header"
                        *ngFor="let day of days"
                        [class.cal-past]="day.isPast"
                        [class.cal-today]="day.isToday"
                        [class.cal-future]="day.isFuture"
                        [class.cal-weekend]="day.isWeekend"
                        [class.cal-drag-over]="day.dragOver"
                        (mwlClick)="dayClicked.emit({date: day.date})">
                        <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>
                        <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>
                    </div>
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{days: days, locale: locale, dayClicked: dayClicked}">
        </ng-template>
    `
            },] },
];
CalendarSchedulerHeaderComponent.propDecorators = {
    days: [{ type: Input }],
    locale: [{ type: Input }],
    customTemplate: [{ type: Input }],
    dayClicked: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const moment$1 = momentImported;
/**
 * [mwlCalendarTooltip]="event.title | calendarEventTitle:'weekTooltip':event"
 * [tooltipPlacement]="tooltipPlacement"
 */
class CalendarSchedulerEventComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.showActions = true;
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.segment.hasBorder = this.hour.hasBorder = !this.event.endsAfterSegment;
        this.title = moment$1(this.event.start).format('dddd L');
        this.checkEnableState();
    }
    /**
     * @return {?}
     */
    checkEnableState() {
        if (this.segment.isDisabled) {
            this.day.hours.forEach((hour) => {
                hour.segments.forEach((segment) => {
                    segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                        .forEach((event) => {
                        event.isDisabled = true;
                    });
                });
            });
        }
    }
    /**
     * @return {?}
     */
    highlightEvent() {
        // let events: CalendarSchedulerEvent[] = this.day.hours
        //    .filter(h => h.segments.some(s => s.events.some(e => e.id === this.event.id)))
        //    .map(h =>
        //        h.segments.map(s =>
        //            s.events.filter(e => e.id === this.event.id)
        //        ).reduce((prev, curr) => prev.concat(curr))
        //    )
        //    .reduce((prev, curr) => prev.concat(curr));
        this.day.hours.forEach((hour) => {
            hour.segments.forEach((segment) => {
                segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                    .forEach((event) => {
                    event.isHovered = true;
                });
            });
        });
    }
    /**
     * @return {?}
     */
    unhighlightEvent() {
        this.day.hours.forEach((hour) => {
            hour.segments.forEach((segment) => {
                segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                    .forEach((event) => {
                    event.isHovered = false;
                });
            });
        });
    }
}
CalendarSchedulerEventComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event',
                template: `
        <ng-template #defaultTemplate>
            <div
                class="cal-scheduler-event"
                [title]="title"
                [class.cal-starts-within-segment]="!event.startsBeforeSegment"
                [class.cal-ends-within-segment]="!event.endsAfterSegment"
                [class.hovered]="event.isHovered"
                [class.cal-disabled]="event.isDisabled || segment.isDisabled"
                [class.cal-not-clickable]="!event.isClickable"
                [style.backgroundColor]="event.color.primary"
                [ngClass]="event?.cssClass"
                (mwlClick)="eventClicked.emit({event: event})"
                (mouseenter)="highlightEvent()"
                (mouseleave)="unhighlightEvent()">
                <calendar-scheduler-event-title *ngIf="!event.startsBeforeSegment"
                    [event]="event"
                    view="week">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content *ngIf="!event.startsBeforeSegment"
                    [event]="event">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions [event]="event" *ngIf="showActions && event.isClickable && !event.endsAfterSegment"></calendar-scheduler-event-actions>
                <calendar-scheduler-event-actions [event]="event" *ngIf="showActions && event.isDisabled && !event.endsAfterSegment"></calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                day: day,
                hour: hour,
                segment: segment,
                event: event,
                tooltipPlacement: tooltipPlacement,
                showActions: showActions,
                customTemplate: customTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    'class': 'cal-scheduler-event-container'
                }
            },] },
];
/** @nocollapse */
CalendarSchedulerEventComponent.ctorParameters = () => [
    { type: Renderer2 }
];
CalendarSchedulerEventComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    hour: [{ type: Input }],
    segment: [{ type: Input }],
    event: [{ type: Input }],
    tooltipPlacement: [{ type: Input }],
    showActions: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventClicked: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CalendarSchedulerEventTitleComponent {
}
CalendarSchedulerEventTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-title',
                template: `
        <div
            class="cal-scheduler-event-title"
            [innerHTML]="event.title | schedulerEventTitle:view:event">
        </div>
        <div *ngIf="event.status"
            class="cal-scheduler-event-status"
            [class.ok]="event.status === 'ok'"
            [class.warning]="event.status === 'warning'"
            [class.danger]="event.status === 'danger'">
        </div>
    `,
                host: {
                    'class': 'cal-scheduler-event-title-container'
                }
            },] },
];
CalendarSchedulerEventTitleComponent.propDecorators = {
    event: [{ type: Input }],
    view: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CalendarSchedulerEventContentComponent {
}
CalendarSchedulerEventContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-content',
                template: `
        <div *ngIf="event.content"
            class="cal-scheduler-event-content"
            [innerHTML]="event.content">
        </div>
    `,
                host: {
                    'class': 'cal-scheduler-event-content-container'
                }
            },] },
];
CalendarSchedulerEventContentComponent.propDecorators = {
    event: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CalendarSchedulerEventActionsComponent {
    constructor() {
        this.actions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.actions = this.event.isDisabled ?
            this.event.actions.filter((a) => !a.when || a.when === 'disabled') :
            this.event.actions.filter((a) => !a.when || a.when === 'enabled');
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} action
     * @param {?} event
     * @return {?}
     */
    onActionClick(mouseEvent, action, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        action.onClick(event);
    }
}
CalendarSchedulerEventActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-actions',
                template: `
        <span *ngIf="event.actions" class="cal-scheduler-event-actions">
            <a
                class="cal-scheduler-event-action"
                href="javascript:;"
                *ngFor="let action of actions"
                (mwlClick)="onActionClick($event, action, event)"
                [ngClass]="action.cssClass"
                [innerHtml]="action.label"
                [title]="action.title">
            </a>
        </span>
    `,
                host: {
                    'class': 'cal-scheduler-event-actions-container'
                }
            },] },
];
CalendarSchedulerEventActionsComponent.propDecorators = {
    event: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SchedulerEventTitleFormatter extends CalendarEventTitleFormatter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SchedulerEventTitlePipe {
    /**
     * @param {?} schedulerEventTitle
     */
    constructor(schedulerEventTitle) {
        this.schedulerEventTitle = schedulerEventTitle;
    }
    /**
     * @param {?} title
     * @param {?} titleType
     * @param {?} event
     * @return {?}
     */
    transform(title, titleType, event) {
        return this.schedulerEventTitle[titleType](event);
    }
}
SchedulerEventTitlePipe.decorators = [
    { type: Pipe, args: [{
                name: 'schedulerEventTitle'
            },] },
];
/** @nocollapse */
SchedulerEventTitlePipe.ctorParameters = () => [
    { type: SchedulerEventTitleFormatter }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SchedulerDateFormatter extends CalendarDateFormatter {
    /**
     * The time formatting down the left hand side of the day view
     * @param {?} __0
     * @return {?}
     */
    dayViewHour({ date, locale }) {
        return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    weekViewTitle({ date, locale }) {
        /** @type {?} */
        const year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        /** @type {?} */
        const month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
        /** @type {?} */
        let firstDay = date.getDate();
        if (date.getDay() === 0) {
            firstDay += 1;
        }
        /** @type {?} */
        let lastDay = firstDay + 6;
        /** @type {?} */
        let firstDayMonth = month;
        /** @type {?} */
        let lastDayMonth = month;
        /** @type {?} */
        let firstDayYear = year;
        /** @type {?} */
        let lastDayYear = year;
        if (firstDay < 1) {
            /** @type {?} */
            const prevMonthDate = new Date(date.getFullYear(), date.getMonth() - 1);
            firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
            /** @type {?} */
            const daysInPrevMonth = this.daysInMonth(prevMonthDate);
            /** @type {?} */
            let i = 0;
            /** @type {?} */
            let prevMonthDay = daysInPrevMonth;
            for (i = 0; i < Math.abs(firstDay); i++) {
                prevMonthDay--;
            }
            firstDay = prevMonthDay;
            /** @type {?} */
            const prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
            if (Number(prevMonthYear) < Number(year)) {
                firstDayYear = prevMonthYear;
            }
        }
        /** @type {?} */
        const daysInMonth = this.daysInMonth(date);
        if (lastDay > daysInMonth) {
            /** @type {?} */
            const nextMonthDate = new Date(date.getFullYear(), date.getMonth() + 1);
            lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
            /** @type {?} */
            let i = 0;
            /** @type {?} */
            let nextMonthDay = 0;
            for (i = 0; i < (lastDay - daysInMonth); i++) {
                nextMonthDay++;
            }
            lastDay = nextMonthDay;
            /** @type {?} */
            const nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
            if (Number(nextMonthYear) > Number(year)) {
                lastDayYear = nextMonthYear;
            }
        }
        return `${firstDay}` + (firstDayMonth !== lastDayMonth ? ' ' + firstDayMonth : '') +
            (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
            ` - ${lastDay} ${lastDayMonth} ${lastDayYear}`;
    }
    /**
     * @param {?} anyDateInMonth
     * @return {?}
     */
    daysInMonth(anyDateInMonth) {
        return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} period
 * @param {?} date
 * @param {?} amount
 * @return {?}
 */
function addPeriod(period, date, amount) {
    return {
        day: addDays,
        week: addWeeks,
        month: addMonths
    }[period](date, amount);
}
/**
 * @param {?} period
 * @param {?} date
 * @param {?} amount
 * @return {?}
 */
function subPeriod(period, date, amount) {
    return {
        day: subDays,
        week: subWeeks,
        month: subMonths
    }[period](date, amount);
}
/**
 * @param {?} period
 * @param {?} date
 * @return {?}
 */
function startOfPeriod(period, date) {
    return {
        day: startOfDay,
        week: startOfWeek,
        month: startOfMonth
    }[period](date);
}
/**
 * @param {?} period
 * @param {?} date
 * @return {?}
 */
function endOfPeriod(period, date) {
    return {
        day: endOfDay,
        week: endOfWeek,
        month: endOfMonth
    }[period](date);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
/**
 * @param {?} config
 * @return {?}
 */
function provideAuthConfig(config) {
    return new SchedulerConfig(config);
}
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalenderModule } from 'angular-calendar';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * \@NgModule({
 *   imports: [
 *     CalenderModule.forRoot(),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
class SchedulerModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideAuthConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    }
}
SchedulerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CalendarModule.forRoot()
                ],
                declarations: [
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerCellComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent,
                    SchedulerEventTitlePipe
                ],
                providers: [
                    SchedulerEventTitlePipe,
                    SchedulerEventTitleFormatter,
                    SchedulerDateFormatter
                ],
                exports: [
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerCellComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { SCHEDULER_CONFIG, provideAuthConfig, SchedulerModule, CalendarSchedulerViewComponent, SchedulerDateFormatter, SchedulerEventTitleFormatter, SchedulerEventTitlePipe, addPeriod, subPeriod, startOfPeriod, endOfPeriod, CalendarSchedulerCellComponent as ɵb, CalendarSchedulerEventActionsComponent as ɵg, CalendarSchedulerEventContentComponent as ɵf, CalendarSchedulerEventTitleComponent as ɵe, CalendarSchedulerEventComponent as ɵd, CalendarSchedulerHeaderComponent as ɵc, SchedulerConfig as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,