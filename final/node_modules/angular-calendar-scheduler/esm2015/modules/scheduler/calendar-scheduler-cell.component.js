/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
import * as momentImported from 'moment';
/** @type {?} */
const moment = momentImported;
export class CalendarSchedulerCellComponent {
    constructor() {
        this.showActions = true;
        this.highlightSegment = new EventEmitter();
        this.unhighlightSegment = new EventEmitter();
        this.segmentClicked = new EventEmitter();
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.title = moment(this.day.date).format('dddd L');
    }
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.highlightSegment.emit({ event: event });
        }
    }
    /**
     * @param {?} mouseEvent
     * @param {?} segment
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            this.unhighlightSegment.emit({ event: event });
        }
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} segment
     * @return {?}
     */
    onSegmentClick(mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0) {
            this.segmentClicked.emit({ segment: segment });
        }
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} event
     * @return {?}
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
}
CalendarSchedulerCellComponent.decorators = [
    { type: Component, args: [{
                // [class.no-border]': '!day.hasBorder
                selector: 'calendar-scheduler-cell',
                template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-segments" *ngIf="hour.segments.length > 0"
                [ngClass]="hour?.cssClass"
                [class.no-border]="!hour.hasBorder">
                <div class="cal-scheduler-segment"
                    *ngFor="let segment of hour.segments; let si = index"
                    [title]="title"
                    [ngClass]="segment?.cssClass"
                    [class.has-events]="segment.events.length > 0"
                    [class.cal-disabled]="segment.isDisabled"
                    [style.backgroundColor]="segment.backgroundColor"
                    [class.no-border]="!segment.hasBorder"
                    (mwlClick)="onSegmentClick($event, segment)">

                    <div class="cal-scheduler-events" *ngIf="segment.events.length > 0">
                        <calendar-scheduler-event
                            *ngFor="let event of segment.events"
                            [day]="day"
                            [hour]="hour"
                            [segment]="segment"
                            [event]="event"
                            (mouseenter)="onMouseEnter($event, segment, event)"
                            (mouseleave)="onMouseLeave($event, segment, event)"
                            [tooltipPlacement]="tooltipPlacement"
                            [showActions]="showActions"
                            [customTemplate]="eventTemplate"
                            (eventClicked)="onEventClick($event, event)">
                        </calendar-scheduler-event>
                    </div>
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                day: day,
                hour: hour,
                locale: locale,
                tooltipPlacement: tooltipPlacement,
                showActions: showActions,
                eventTemplate: eventTemplate,
                highlightSegment: highlightSegment,
                unhighlightSegment: unhighlightSegment,
                segmentClicked: segmentClicked,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    'class': 'cal-scheduler-cell',
                    '[class.cal-past]': 'day.isPast',
                    '[class.cal-today]': 'day.isToday',
                    '[class.cal-future]': 'day.isFuture',
                    '[class.cal-weekend]': 'day.isWeekend',
                    '[class.cal-in-month]': 'day.inMonth',
                    '[class.cal-out-month]': '!day.inMonth',
                    '[style.backgroundColor]': 'day.backgroundColor'
                }
            },] },
];
CalendarSchedulerCellComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    hour: [{ type: Input }],
    locale: [{ type: Input }],
    tooltipPlacement: [{ type: Input }],
    showActions: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventTemplate: [{ type: Input }],
    highlightSegment: [{ type: Output }],
    unhighlightSegment: [{ type: Output }],
    segmentClicked: [{ type: Output }],
    eventClicked: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.title;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.day;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.hour;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.locale;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.tooltipPlacement;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.showActions;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.customTemplate;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.eventTemplate;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.highlightSegment;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.unhighlightSegment;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.segmentClicked;
    /** @type {?} */
    CalendarSchedulerCellComponent.prototype.eventClicked;
}

//# sourceMappingURL=data:application/json;base64,