/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class CalendarSchedulerEventActionsComponent {
    constructor() {
        this.actions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.actions = this.event.isDisabled ?
            this.event.actions.filter((a) => !a.when || a.when === 'disabled') :
            this.event.actions.filter((a) => !a.when || a.when === 'enabled');
    }
    /**
     * @hidden
     * @param {?} mouseEvent
     * @param {?} action
     * @param {?} event
     * @return {?}
     */
    onActionClick(mouseEvent, action, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        action.onClick(event);
    }
}
CalendarSchedulerEventActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event-actions',
                template: `
        <span *ngIf="event.actions" class="cal-scheduler-event-actions">
            <a
                class="cal-scheduler-event-action"
                href="javascript:;"
                *ngFor="let action of actions"
                (mwlClick)="onActionClick($event, action, event)"
                [ngClass]="action.cssClass"
                [innerHtml]="action.label"
                [title]="action.title">
            </a>
        </span>
    `,
                host: {
                    'class': 'cal-scheduler-event-actions-container'
                }
            },] },
];
CalendarSchedulerEventActionsComponent.propDecorators = {
    event: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CalendarSchedulerEventActionsComponent.prototype.event;
    /** @type {?} */
    CalendarSchedulerEventActionsComponent.prototype.actions;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1jYWxlbmRhci1zY2hlZHVsZXIvIiwic291cmNlcyI6WyJtb2R1bGVzL3NjaGVkdWxlci9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBeUJ6RCxNQUFNOzt1QkFJK0MsRUFBRTs7Ozs7SUFFNUMsUUFBUTtRQUNYLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUErQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2xHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQStCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7Ozs7SUFNeEcsYUFBYSxDQUFDLFVBQXNCLEVBQUUsTUFBb0MsRUFBRSxLQUE2QjtRQUNyRyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUM3QixVQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDaEM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3pCOzs7WUF4Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxrQ0FBa0M7Z0JBQzVDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0tBWVQ7Z0JBQ0QsSUFBSSxFQUFFO29CQUNGLE9BQU8sRUFBRSx1Q0FBdUM7aUJBQ25EO2FBQ0o7OztvQkFHSSxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudEFjdGlvblxyXG59IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLXZpZXcuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdjYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucycsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxzcGFuICpuZ0lmPVwiZXZlbnQuYWN0aW9uc1wiIGNsYXNzPVwiY2FsLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImNhbC1zY2hlZHVsZXItZXZlbnQtYWN0aW9uXCJcclxuICAgICAgICAgICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OjtcIlxyXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGFjdGlvbiBvZiBhY3Rpb25zXCJcclxuICAgICAgICAgICAgICAgIChtd2xDbGljayk9XCJvbkFjdGlvbkNsaWNrKCRldmVudCwgYWN0aW9uLCBldmVudClcIlxyXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiYWN0aW9uLmNzc0NsYXNzXCJcclxuICAgICAgICAgICAgICAgIFtpbm5lckh0bWxdPVwiYWN0aW9uLmxhYmVsXCJcclxuICAgICAgICAgICAgICAgIFt0aXRsZV09XCJhY3Rpb24udGl0bGVcIj5cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgIGAsXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgJ2NsYXNzJzogJ2NhbC1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucy1jb250YWluZXInXHJcbiAgICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgZXZlbnQ6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnQ7XHJcblxyXG4gICAgcHVibGljIGFjdGlvbnM6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25bXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB0aGlzLmV2ZW50LmlzRGlzYWJsZWQgP1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2Rpc2FibGVkJykgOlxyXG4gICAgICAgICAgICB0aGlzLmV2ZW50LmFjdGlvbnMuZmlsdGVyKChhOiBDYWxlbmRhclNjaGVkdWxlckV2ZW50QWN0aW9uKSA9PiAhYS53aGVuIHx8IGEud2hlbiA9PT0gJ2VuYWJsZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25BY3Rpb25DbGljayhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBhY3Rpb246IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb24sIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhY3Rpb24ub25DbGljayhldmVudCk7XHJcbiAgICB9XHJcbn1cclxuIl19