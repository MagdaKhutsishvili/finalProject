/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { CalendarDateFormatter } from 'angular-calendar';
export class SchedulerDateFormatter extends CalendarDateFormatter {
    /**
     * The time formatting down the left hand side of the day view
     * @param {?} __0
     * @return {?}
     */
    dayViewHour({ date, locale }) {
        return new Intl.DateTimeFormat(locale, { hour: 'numeric', minute: 'numeric' }).format(date);
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    weekViewTitle({ date, locale }) {
        /** @type {?} */
        const year = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(date);
        /** @type {?} */
        const month = new Intl.DateTimeFormat(locale, { month: 'short' }).format(date);
        /** @type {?} */
        let firstDay = date.getDate();
        if (date.getDay() === 0) {
            firstDay += 1;
        }
        /** @type {?} */
        let lastDay = firstDay + 6;
        /** @type {?} */
        let firstDayMonth = month;
        /** @type {?} */
        let lastDayMonth = month;
        /** @type {?} */
        let firstDayYear = year;
        /** @type {?} */
        let lastDayYear = year;
        if (firstDay < 1) {
            /** @type {?} */
            const prevMonthDate = new Date(date.getFullYear(), date.getMonth() - 1);
            firstDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(prevMonthDate);
            /** @type {?} */
            const daysInPrevMonth = this.daysInMonth(prevMonthDate);
            /** @type {?} */
            let i = 0;
            /** @type {?} */
            let prevMonthDay = daysInPrevMonth;
            for (i = 0; i < Math.abs(firstDay); i++) {
                prevMonthDay--;
            }
            firstDay = prevMonthDay;
            /** @type {?} */
            const prevMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(prevMonthDate);
            if (Number(prevMonthYear) < Number(year)) {
                firstDayYear = prevMonthYear;
            }
        }
        /** @type {?} */
        const daysInMonth = this.daysInMonth(date);
        if (lastDay > daysInMonth) {
            /** @type {?} */
            const nextMonthDate = new Date(date.getFullYear(), date.getMonth() + 1);
            lastDayMonth = new Intl.DateTimeFormat(locale, { month: 'short' }).format(nextMonthDate);
            /** @type {?} */
            let i = 0;
            /** @type {?} */
            let nextMonthDay = 0;
            for (i = 0; i < (lastDay - daysInMonth); i++) {
                nextMonthDay++;
            }
            lastDay = nextMonthDay;
            /** @type {?} */
            const nextMonthYear = new Intl.DateTimeFormat(locale, { year: 'numeric' }).format(nextMonthDate);
            if (Number(nextMonthYear) > Number(year)) {
                lastDayYear = nextMonthYear;
            }
        }
        return `${firstDay}` + (firstDayMonth !== lastDayMonth ? ' ' + firstDayMonth : '') +
            (firstDayYear !== lastDayYear ? ' ' + firstDayYear : '') +
            ` - ${lastDay} ${lastDayMonth} ${lastDayYear}`;
    }
    /**
     * @param {?} anyDateInMonth
     * @return {?}
     */
    daysInMonth(anyDateInMonth) {
        return new Date(anyDateInMonth.getFullYear(), anyDateInMonth.getMonth() + 1, 0).getDate();
    }
}

//# sourceMappingURL=data:application/json;base64,