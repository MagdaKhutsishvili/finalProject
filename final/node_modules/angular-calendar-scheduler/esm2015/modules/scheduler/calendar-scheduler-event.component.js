/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, TemplateRef, Renderer2 } from '@angular/core';
import { isSameDay } from 'date-fns';
import * as momentImported from 'moment';
/** @type {?} */
const moment = momentImported;
/**
 * [mwlCalendarTooltip]="event.title | calendarEventTitle:'weekTooltip':event"
 * [tooltipPlacement]="tooltipPlacement"
 */
export class CalendarSchedulerEventComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.showActions = true;
        this.eventClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.segment.hasBorder = this.hour.hasBorder = !this.event.endsAfterSegment;
        this.title = moment(this.event.start).format('dddd L');
        this.checkEnableState();
    }
    /**
     * @return {?}
     */
    checkEnableState() {
        if (this.segment.isDisabled) {
            this.day.hours.forEach((hour) => {
                hour.segments.forEach((segment) => {
                    segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                        .forEach((event) => {
                        event.isDisabled = true;
                    });
                });
            });
        }
    }
    /**
     * @return {?}
     */
    highlightEvent() {
        // let events: CalendarSchedulerEvent[] = this.day.hours
        //    .filter(h => h.segments.some(s => s.events.some(e => e.id === this.event.id)))
        //    .map(h =>
        //        h.segments.map(s =>
        //            s.events.filter(e => e.id === this.event.id)
        //        ).reduce((prev, curr) => prev.concat(curr))
        //    )
        //    .reduce((prev, curr) => prev.concat(curr));
        this.day.hours.forEach((hour) => {
            hour.segments.forEach((segment) => {
                segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                    .forEach((event) => {
                    event.isHovered = true;
                });
            });
        });
    }
    /**
     * @return {?}
     */
    unhighlightEvent() {
        this.day.hours.forEach((hour) => {
            hour.segments.forEach((segment) => {
                segment.events.filter((event) => event.id === this.event.id && isSameDay(event.start, this.event.start))
                    .forEach((event) => {
                    event.isHovered = false;
                });
            });
        });
    }
}
CalendarSchedulerEventComponent.decorators = [
    { type: Component, args: [{
                selector: 'calendar-scheduler-event',
                template: `
        <ng-template #defaultTemplate>
            <div
                class="cal-scheduler-event"
                [title]="title"
                [class.cal-starts-within-segment]="!event.startsBeforeSegment"
                [class.cal-ends-within-segment]="!event.endsAfterSegment"
                [class.hovered]="event.isHovered"
                [class.cal-disabled]="event.isDisabled || segment.isDisabled"
                [class.cal-not-clickable]="!event.isClickable"
                [style.backgroundColor]="event.color.primary"
                [ngClass]="event?.cssClass"
                (mwlClick)="eventClicked.emit({event: event})"
                (mouseenter)="highlightEvent()"
                (mouseleave)="unhighlightEvent()">
                <calendar-scheduler-event-title *ngIf="!event.startsBeforeSegment"
                    [event]="event"
                    view="week">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content *ngIf="!event.startsBeforeSegment"
                    [event]="event">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions [event]="event" *ngIf="showActions && event.isClickable && !event.endsAfterSegment"></calendar-scheduler-event-actions>
                <calendar-scheduler-event-actions [event]="event" *ngIf="showActions && event.isDisabled && !event.endsAfterSegment"></calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                day: day,
                hour: hour,
                segment: segment,
                event: event,
                tooltipPlacement: tooltipPlacement,
                showActions: showActions,
                customTemplate: customTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
                host: {
                    'class': 'cal-scheduler-event-container'
                }
            },] },
];
/** @nocollapse */
CalendarSchedulerEventComponent.ctorParameters = () => [
    { type: Renderer2 }
];
CalendarSchedulerEventComponent.propDecorators = {
    title: [{ type: Input }],
    day: [{ type: Input }],
    hour: [{ type: Input }],
    segment: [{ type: Input }],
    event: [{ type: Input }],
    tooltipPlacement: [{ type: Input }],
    showActions: [{ type: Input }],
    customTemplate: [{ type: Input }],
    eventClicked: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.title;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.day;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.hour;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.segment;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.event;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.tooltipPlacement;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.showActions;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.customTemplate;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.eventClicked;
    /** @type {?} */
    CalendarSchedulerEventComponent.prototype.renderer;
}

//# sourceMappingURL=data:application/json;base64,