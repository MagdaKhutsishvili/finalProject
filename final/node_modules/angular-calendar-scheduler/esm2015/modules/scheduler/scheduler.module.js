/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CalendarModule } from 'angular-calendar';
import { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
import { CalendarSchedulerCellComponent } from './calendar-scheduler-cell.component';
import { CalendarSchedulerHeaderComponent } from './calendar-scheduler-header.component';
import { CalendarSchedulerEventComponent } from './calendar-scheduler-event.component';
import { CalendarSchedulerEventTitleComponent } from './calendar-scheduler-event-title.component';
import { CalendarSchedulerEventContentComponent } from './calendar-scheduler-event-content.component';
import { CalendarSchedulerEventActionsComponent } from './calendar-scheduler-event-actions.component';
import { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
import { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
import { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
export { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
export { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
export { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
export { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
export { addPeriod, subPeriod, startOfPeriod, endOfPeriod } from './calendar-utils';
import { SchedulerConfig } from './scheduler-config';
/** @type {?} */
export const SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
/**
 * @param {?} config
 * @return {?}
 */
export function provideAuthConfig(config) {
    return new SchedulerConfig(config);
}
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalenderModule } from 'angular-calendar';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * \@NgModule({
 *   imports: [
 *     CalenderModule.forRoot(),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
export class SchedulerModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideAuthConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    }
}
SchedulerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CalendarModule.forRoot()
                ],
                declarations: [
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerCellComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent,
                    SchedulerEventTitlePipe
                ],
                providers: [
                    SchedulerEventTitlePipe,
                    SchedulerEventTitleFormatter,
                    SchedulerDateFormatter
                ],
                exports: [
                    CalendarSchedulerViewComponent,
                    CalendarSchedulerCellComponent,
                    CalendarSchedulerHeaderComponent,
                    CalendarSchedulerEventComponent,
                    CalendarSchedulerEventTitleComponent,
                    CalendarSchedulerEventContentComponent,
                    CalendarSchedulerEventActionsComponent
                ]
            },] },
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zY2hlZHVsZXIvc2NoZWR1bGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDekYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDN0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDeEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFFckcsK0NBQWMscUNBQXFDLENBQUM7QUFDcEQsdUNBQWMsZ0RBQWdELENBQUM7QUFDL0QsNkNBQWMsdURBQXVELENBQUM7QUFDdEUsd0NBQWMsb0NBQW9DLENBQUM7QUFDbkQsaUVBQWMsa0JBQWtCLENBQUM7QUFFakMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUVyRCxhQUFhLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Ozs7O0FBRXRFLE1BQU0sNEJBQTRCLE1BQXVCO0lBQ3JELE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUN0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaURELE1BQU07Ozs7O0lBQ0osTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUF3QjtRQUNyQyxNQUFNLENBQUM7WUFDSCxRQUFRLEVBQUUsZUFBZTtZQUN6QixTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtnQkFDL0MsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO2FBQ3hGO1NBQ0osQ0FBQztLQUNMOzs7WUF2Q0EsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLGNBQWMsQ0FBQyxPQUFPLEVBQUU7aUJBQ3pCO2dCQUNELFlBQVksRUFBRTtvQkFDWiw4QkFBOEI7b0JBQzlCLDhCQUE4QjtvQkFDOUIsZ0NBQWdDO29CQUNoQywrQkFBK0I7b0JBQy9CLG9DQUFvQztvQkFDcEMsc0NBQXNDO29CQUN0QyxzQ0FBc0M7b0JBQ3RDLHVCQUF1QjtpQkFDeEI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULHVCQUF1QjtvQkFDdkIsNEJBQTRCO29CQUM1QixzQkFBc0I7aUJBQ3ZCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCw4QkFBOEI7b0JBQzlCLDhCQUE4QjtvQkFDOUIsZ0NBQWdDO29CQUNoQywrQkFBK0I7b0JBQy9CLG9DQUFvQztvQkFDcEMsc0NBQXNDO29CQUN0QyxzQ0FBc0M7aUJBQ3ZDO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IENhbGVuZGFyTW9kdWxlIH0gZnJvbSAnYW5ndWxhci1jYWxlbmRhcic7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyVmlld0NvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLXZpZXcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItY2VsbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlckhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWhlYWRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFRpdGxlQ29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtdGl0bGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1jb250ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucy5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgU2NoZWR1bGVyRXZlbnRUaXRsZVBpcGUgfSBmcm9tICcuL3BpcGVzL3NjaGVkdWxlci1ldmVudC10aXRsZS5waXBlJztcclxuaW1wb3J0IHsgU2NoZWR1bGVyRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVycy9zY2hlZHVsZXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTY2hlZHVsZXJFdmVudFRpdGxlRm9ybWF0dGVyIH0gZnJvbSAnLi9mb3JtYXR0ZXJzL3NjaGVkdWxlci1ldmVudC10aXRsZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItdmlldy5jb21wb25lbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm1hdHRlcnMvc2NoZWR1bGVyLWRhdGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXJzL3NjaGVkdWxlci1ldmVudC10aXRsZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL3BpcGVzL3NjaGVkdWxlci1ldmVudC10aXRsZS5waXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci11dGlscyc7XHJcblxyXG5pbXBvcnQgeyBTY2hlZHVsZXJDb25maWcgfSBmcm9tICcuL3NjaGVkdWxlci1jb25maWcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNDSEVEVUxFUl9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1NjaGVkdWxlckNvbmZpZycpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVBdXRoQ29uZmlnKGNvbmZpZzogU2NoZWR1bGVyQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gbmV3IFNjaGVkdWxlckNvbmZpZyhjb25maWcpO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIG1haW4gbW9kdWxlIG9mIHRoaXMgbGlicmFyeS4gRXhhbXBsZSB1c2FnZTpcclxuICpcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBDYWxlbmRlck1vZHVsZSB9IGZyb20gJ2FuZ3VsYXItY2FsZW5kYXInO1xyXG4gKiBpbXBvcnQgeyBTY2hlZHVsZXJNb2R1bGUgfSBmcm9tICdhbmd1bGFyLWNhbGVuZGFyLXNjaGVkdWxlcic7XHJcbiAqXHJcbiAqIEBOZ01vZHVsZSh7XHJcbiAqICAgaW1wb3J0czogW1xyXG4gKiAgICAgQ2FsZW5kZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gKiAgICAgU2NoZWR1bGVyTW9kdWxlLmZvclJvb3QoeyBsb2NhbGU6ICdlbicsIGhlYWRlckRhdGVGb3JtYXQ6ICdkYXlzUmFuZ2UnIH0pXHJcbiAqICAgXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBNeU1vZHVsZSB7fVxyXG4gKiBgYGBcclxuICpcclxuICovXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgQ2FsZW5kYXJNb2R1bGUuZm9yUm9vdCgpXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyVmlld0NvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyQ2VsbENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVySGVhZGVyQ29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRUaXRsZUNvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb250ZW50Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudEFjdGlvbnNDb21wb25lbnQsXHJcbiAgICBTY2hlZHVsZXJFdmVudFRpdGxlUGlwZVxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBTY2hlZHVsZXJFdmVudFRpdGxlUGlwZSxcclxuICAgIFNjaGVkdWxlckV2ZW50VGl0bGVGb3JtYXR0ZXIsXHJcbiAgICBTY2hlZHVsZXJEYXRlRm9ybWF0dGVyXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlclZpZXdDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckNlbGxDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckhlYWRlckNvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50VGl0bGVDb21wb25lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29udGVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50XHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVyTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBTY2hlZHVsZXJDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmdNb2R1bGU6IFNjaGVkdWxlck1vZHVsZSxcclxuICAgICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICAgICAgeyBwcm92aWRlOiBTQ0hFRFVMRVJfQ09ORklHLCB1c2VWYWx1ZTogY29uZmlnIH0sXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogU2NoZWR1bGVyQ29uZmlnLCB1c2VGYWN0b3J5OiBwcm92aWRlQXV0aENvbmZpZywgZGVwczogW1NDSEVEVUxFUl9DT05GSUddIH1cclxuICAgICAgICBdXHJcbiAgICB9O1xyXG59XHJcbn1cclxuIl19